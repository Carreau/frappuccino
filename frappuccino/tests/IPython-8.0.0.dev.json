{
  "function": {
    "IPython.core.interactiveshell.InteractiveShell.ask_yes_no": "(self, prompt, default='None', interrupt='None')",
    "IPython.core.interactiveshell.InteractiveShell.atexit_operations": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.auto_rewrite_input": "(self, cmd)",
    "IPython.core.interactiveshell.InteractiveShell.check_complete": "(self, code)",
    "IPython.core.interactiveshell.InteractiveShell.cleanup": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.complete": "(self, text, line='None', cursor_pos='None')",
    "IPython.core.interactiveshell.InteractiveShell.debugger": "(self, force=False)",
    "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper": "(*args, **kw)",
    "IPython.core.debugger.Pdb.do_debug": "(self, arg)",
    "IPython.core.debugger.Pdb.do_list": "(self, arg)",
    "IPython.core.debugger.Pdb.do_longlist": "(self, arg)",
    "IPython.core.debugger.Pdb.do_pdef": "(self, arg)",
    "IPython.core.debugger.Pdb.do_pdoc": "(self, arg)",
    "IPython.core.debugger.Pdb.do_pfile": "(self, arg)",
    "IPython.core.debugger.Pdb.do_pinfo": "(self, arg)",
    "IPython.core.debugger.Pdb.do_pinfo2": "(self, arg)",
    "IPython.core.debugger.Pdb.do_psource": "(self, arg)",
    "IPython.core.debugger.Pdb.do_where": "(self, arg)",
    "IPython.core.debugger.Pdb.format_stack_entry": "(self, frame_lineno, lprefix=': ', context='None')",
    "IPython.core.debugger.Pdb.getsourcelines": "(self, obj)",
    "IPython.core.debugger.Pdb.interaction": "(self, frame, traceback)",
    "IPython.core.debugger.Pdb.new_do_down": "(self, arg)",
    "IPython.core.debugger.Pdb.new_do_frame": "(self, arg)",
    "IPython.core.debugger.Pdb.new_do_quit": "(self, arg)",
    "IPython.core.debugger.Pdb.new_do_restart": "(self, arg)",
    "IPython.core.debugger.Pdb.new_do_up": "(self, arg)",
    "IPython.core.debugger.Pdb.print_list_lines": "(self, filename, first, last)",
    "IPython.core.debugger.Pdb.print_stack_entry": "(self, frame_lineno, prompt_prefix='\\n-> ', context='None')",
    "IPython.core.debugger.Pdb.print_stack_trace": "(self, context='None')",
    "IPython.core.debugger.Pdb.set_colors": "(self, scheme)",
    "IPython.core.interactiveshell.InteractiveShell.define_macro": "(self, name, themacro)",
    "IPython.core.interactiveshell.InteractiveShell.del_var": "(self, varname, by_name=False)",
    "IPython.core.interactiveshell.InteractiveShell.drop_by_id": "(self, variables)",
    "IPython.core.interactiveshell.InteractiveShell.enable_gui": "(self, gui='None')",
    "IPython.core.interactiveshell.InteractiveShell.enable_matplotlib": "(self, gui='None')",
    "IPython.core.interactiveshell.InteractiveShell.enable_pylab": "(self, gui='None', import_all=True, welcome_message=False)",
    "IPython.core.interactiveshell.InteractiveShell.ev": "(self, expr)",
    "IPython.core.interactiveshell.InteractiveShell.ex": "(self, cmd)",
    "IPython.core.interactiveshell.InteractiveShell.excepthook": "(self, etype, value, tb)",
    "IPython.core.interactiveshell.InteractiveShell.extract_input_lines": "(self, range_str, raw=False)",
    "IPython.core.interactiveshell.InteractiveShell.find_cell_magic": "(self, magic_name)",
    "IPython.core.interactiveshell.InteractiveShell.find_line_magic": "(self, magic_name)",
    "IPython.core.interactiveshell.InteractiveShell.find_magic": "(self, magic_name, magic_kind='line')",
    "IPython.core.interactiveshell.InteractiveShell.find_user_code": "(self, target, raw=True, py_only=False, skip_encoding_cookie=True, search_ns=False)",
    "IPython.core.interactiveshell.InteractiveShell.get_exception_only": "(self, exc_tuple='None')",
    "IPython.core.interactiveshell.InteractiveShell.get_ipython": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.getoutput": "(self, cmd, split=True, depth=0)",
    "IPython.core.interactiveshell.InteractiveShell.init_alias": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_builtins": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_completer": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_create_namespaces": "(self, user_module='None', user_ns='None')",
    "IPython.core.interactiveshell.InteractiveShell.init_data_pub": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_deprecation_warnings": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_display_formatter": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_display_pub": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_displayhook": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_encoding": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_environment": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_events": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_extension_manager": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_history": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_hooks": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_instance_attrs": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_io": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_ipython_dir": "(self, ipython_dir)",
    "IPython.core.interactiveshell.InteractiveShell.init_logger": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_logstart": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_magics": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_payload": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_pdb": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_prefilter": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_profile_dir": "(self, profile_dir)",
    "IPython.core.interactiveshell.InteractiveShell.init_prompts": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_pushd_popd_magic": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_readline": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_sys_modules": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_traceback_handlers": "(self, custom_exceptions)",
    "IPython.core.interactiveshell.InteractiveShell.init_user_ns": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.init_virtualenv": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.magic": "(self, arg_s)",
    "IPython.core.interactiveshell.InteractiveShell.mktempfile": "(self, data='None', prefix='ipython_edit_')",
    "IPython.core.interactiveshell.InteractiveShell.new_main_mod": "(self, filename, modname)",
    "IPython.core.interactiveshell.InteractiveShell.object_inspect": "(self, oname, detail_level=0)",
    "IPython.core.interactiveshell.InteractiveShell.object_inspect_mime": "(self, oname, detail_level=0)",
    "IPython.core.interactiveshell.InteractiveShell.object_inspect_text": "(self, oname, detail_level=0)",
    "IPython.core.interactiveshell.InteractiveShell.prepare_user_module": "(self, user_module='None', user_ns='None')",
    "IPython.core.interactiveshell.InteractiveShell.push": "(self, variables, interactive=True)",
    "IPython.core.interactiveshell.InteractiveShell.refresh_style": "(self)",
    "IPython.core.magic.MagicsManager.register_function": "(self, func, magic_kind='line', magic_name='None')",
    "IPython.core.interactiveshell.InteractiveShell.register_post_execute": "(self, func)",
    "IPython.core.interactiveshell.InteractiveShell.reset": "(self, new_session=True)",
    "IPython.core.interactiveshell.InteractiveShell.reset_selective": "(self, regex='None')",
    "IPython.core.interactiveshell.InteractiveShell.restore_sys_module_state": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.run_ast_nodes": "(self, nodelist, cell_name, interactivity='last_expr', compiler='<built-in function compile>', result='None')",
    "IPython.core.interactiveshell.InteractiveShell.run_cell": "(self, raw_cell, store_history=False, silent=False, shell_futures=True)",
    "IPython.core.interactiveshell.InteractiveShell.run_cell_async": "(self, raw_cell, store_history=False, silent=False, shell_futures=True)",
    "IPython.core.interactiveshell.InteractiveShell.run_cell_magic": "(self, magic_name, line, cell)",
    "IPython.core.interactiveshell.InteractiveShell.run_code": "(self, code_obj, result='None', *, async_=False)",
    "IPython.core.interactiveshell.InteractiveShell.run_line_magic": "(self, magic_name, line, _stack_depth=1)",
    "IPython.core.interactiveshell.InteractiveShell.safe_execfile": "(self, fname, *where, exit_ignore=False, raise_exceptions=False, shell_futures=False)",
    "IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy": "(self, fname, shell_futures=False, raise_exceptions=False)",
    "IPython.core.interactiveshell.InteractiveShell.safe_run_module": "(self, mod_name, where)",
    "IPython.core.interactiveshell.InteractiveShell.save_sys_module_state": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.set_autoindent": "(self, value='None')",
    "IPython.core.interactiveshell.InteractiveShell.set_completer_frame": "(self, frame='None')",
    "IPython.core.interactiveshell.InteractiveShell.set_custom_completer": "(self, completer, pos=0)",
    "IPython.core.interactiveshell.InteractiveShell.set_custom_exc": "(self, exc_tuple, handler)",
    "IPython.core.interactiveshell.InteractiveShell.set_hook": "(self, name, hook, priority=50, str_key='None', re_key='None', _warn_deprecated=True)",
    "IPython.core.interactiveshell.InteractiveShell.set_next_input": "(self, s, replace=False)",
    "IPython.core.interactiveshell.InteractiveShell.set_trio_runner": "(self, tr)",
    "IPython.core.interactiveshell.InteractiveShell.should_run_async": "(self, raw_cell)",
    "IPython.core.interactiveshell.InteractiveShell.show_banner": "(self, banner='None')",
    "IPython.core.interactiveshell.InteractiveShell.show_usage": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.show_usage_error": "(self, exc)",
    "IPython.core.interactiveshell.InteractiveShell.showindentationerror": "(self)",
    "IPython.core.interactiveshell.InteractiveShell.showsyntaxerror": "(self, filename='None', running_compiled_code=False)",
    "IPython.core.interactiveshell.InteractiveShell.showtraceback": "(self, exc_tuple='None', filename='None', tb_offset='None', exception_only=False, running_compiled_code=False)",
    "IPython.core.interactiveshell.InteractiveShell.switch_doctest_mode": "(self, mode)",
    "IPython.core.interactiveshell.InteractiveShell.system_piped": "(self, cmd)",
    "IPython.core.interactiveshell.InteractiveShell.system_raw": "(self, cmd)",
    "IPython.core.interactiveshell.InteractiveShell.transform_ast": "(self, node)",
    "IPython.core.interactiveshell.InteractiveShell.transform_cell": "(self, raw_cell)",
    "IPython.core.interactiveshell.InteractiveShell.user_expressions": "(self, expressions)",
    "IPython.core.interactiveshell.InteractiveShell.var_expand": "(self, cmd, depth=0, formatter='<IPython.utils.text.DollarFormatter object at 0xffffff>')",
    "IPython.core.interactiveshell.InteractiveShell.write": "(self, data)",
    "IPython.core.interactiveshell.InteractiveShell.write_err": "(self, data)",
    "IPython.core.alias.Alias.validate": "(self)",
    "IPython.core.alias.AliasManager.clear_aliases": "(self)",
    "IPython.core.alias.AliasManager.define_alias": "(self, name, cmd)",
    "IPython.core.alias.AliasManager.get_alias": "(self, name)",
    "IPython.core.alias.AliasManager.init_aliases": "(self)",
    "IPython.core.alias.AliasManager.is_alias": "(self, name)",
    "IPython.core.alias.AliasManager.retrieve_alias": "(self, name)",
    "IPython.core.alias.AliasManager.soft_define_alias": "(self, name, cmd)",
    "IPython.core.alias.AliasManager.undefine_alias": "(self, name)",
    "IPython.core.alias.default_aliases": "()",
    "IPython.core.application.BaseIPythonApplication.excepthook": "(self, etype, evalue, tb)",
    "IPython.core.application.BaseIPythonApplication.init_config_files": "(self)",
    "IPython.core.application.BaseIPythonApplication.init_crash_handler": "(self)",
    "IPython.core.application.BaseIPythonApplication.init_profile_dir": "(self)",
    "IPython.core.application.BaseIPythonApplication.initialize": "(self, argv='None')",
    "IPython.core.application.BaseIPythonApplication.initialize_subcommand": "(self, subc, argv='None')",
    "IPython.core.application.BaseIPythonApplication.load_config_file": "(self, suppress_errors='None')",
    "IPython.core.application.ProfileAwareConfigLoader.load_subconfig": "(self, fname, path='None', profile='None')",
    "IPython.core.application.BaseIPythonApplication.stage_default_config_file": "(self)",
    "IPython.core.profiledir.ProfileDir.check_dirs": "(self)",
    "IPython.core.profiledir.ProfileDir.copy_config_file": "(self, config_file, path='None', overwrite=False)",
    "IPython.core.profiledir.ProfileDir.create_profile_dir": "(profile_dir, config='None')",
    "IPython.core.profiledir.ProfileDir.create_profile_dir_by_name": "(path, name='default', config='None')",
    "IPython.core.profiledir.ProfileDir.find_profile_dir": "(profile_dir, config='None')",
    "IPython.core.profiledir.ProfileDir.find_profile_dir_by_name": "(ipython_dir, name='default', config='None')",
    "IPython.core.crashhandler.CrashHandler.make_report": "(self, traceback)",
    "IPython.core.crashhandler.crash_handler_lite": "(etype, evalue, tb)",
    "IPython.utils.py3compat.input": "(prompt='')",
    "IPython.utils.sysinfo.sys_info": "()",
    "IPython.core.ultratb.TBTools.color_toggle": "(self)",
    "IPython.core.ultratb.FormattedTB.context": "(self)",
    "IPython.core.ultratb.VerboseTB.debugger": "(self, force=False)",
    "IPython.core.ultratb.VerboseTB.format_exception": "(self, etype, evalue)",
    "IPython.core.ultratb.VerboseTB.format_exception_as_a_whole": "(self, etype, evalue, etb, number_of_lines_of_context, tb_offset)",
    "IPython.core.ultratb.VerboseTB.format_record": "(self, frame_info)",
    "IPython.core.ultratb.ListTB.get_exception_only": "(self, etype, value)",
    "IPython.core.ultratb.TBTools.get_parts_of_chained_exception": "(self, evalue)",
    "IPython.core.ultratb.VerboseTB.get_records": "(self, etb, number_of_lines_of_context, tb_offset)",
    "IPython.core.ultratb.VerboseTB.handler": "(self, info='None')",
    "IPython.core.ultratb.FormattedTB.minimal": "(self)",
    "IPython.core.ultratb.FormattedTB.plain": "(self)",
    "IPython.core.ultratb.TBTools.prepare_chained_exception_message": "(self, cause)",
    "IPython.core.ultratb.VerboseTB.prepare_header": "(self, etype, long_version=False)",
    "IPython.core.ultratb.TBTools.set_colors": "(self, *args, **kw)",
    "IPython.core.ultratb.FormattedTB.set_mode": "(self, mode='None')",
    "IPython.core.ultratb.ListTB.show_exception_only": "(self, etype, evalue)",
    "IPython.core.ultratb.FormattedTB.stb2text": "(self, stb)",
    "IPython.core.ultratb.AutoFormattedTB.structured_traceback": "(self, etype='None', value='None', tb='None', tb_offset='None', number_of_lines_of_context=5)",
    "IPython.core.ultratb.TBTools.text": "(self, etype, value, tb, tb_offset='None', context=5)",
    "IPython.core.ultratb.FormattedTB.verbose": "(self)",
    "IPython.core.ultratb.FormattedTB.structured_traceback": "(self, etype, value, tb, tb_offset='None', number_of_lines_of_context=5)",
    "IPython.core.display_trap.DisplayTrap.set": "(self)",
    "IPython.core.display_trap.DisplayTrap.unset": "(self)",
    "IPython.core.ultratb.TBTools.stb2text": "(self, stb)",
    "IPython.core.ultratb.ListTB.structured_traceback": "(self, etype, evalue, etb='None', tb_offset='None', context=5)",
    "IPython.core.ultratb.SyntaxTB.clear_err_state": "(self)",
    "IPython.core.ultratb.SyntaxTB.stb2text": "(self, stb)",
    "IPython.core.ultratb.SyntaxTB.structured_traceback": "(self, etype, value, elist, tb_offset='None', context=5)",
    "IPython.core.ultratb.TBTools.structured_traceback": "(self, etype, evalue, tb, tb_offset='None', context=5, mode='None')",
    "IPython.core.ultratb.VerboseTB.structured_traceback": "(self, etype, evalue, etb, tb_offset='None', number_of_lines_of_context=5)",
    "IPython.utils.colorable.<lambda>": "()",
    "IPython.core.debugger.BdbQuit_IPython_excepthook": "(self, et, ev, tb, tb_offset='None')",
    "IPython.core.debugger.BdbQuit_excepthook": "(et, ev, tb, excepthook='None')",
    "IPython.core.debugger.InterruptiblePdb.cmdloop": "(self)",
    "IPython.utils.coloransi.ColorScheme.copy": "(self, name='None')",
    "IPython.utils.coloransi.ColorSchemeTable.add_scheme": "(self, new_scheme)",
    "IPython.utils.coloransi.ColorSchemeTable.copy": "(self)",
    "BUILTIN.ColorSchemeTable.fromkeys": [
      [
        "iterable",
        {
          "kind": "POSITIONAL_ONLY",
          "name": "iterable",
          "default": "<class 'inspect._empty'>"
        }
      ],
      [
        "value",
        {
          "kind": "POSITIONAL_ONLY",
          "name": "value",
          "default": "None"
        }
      ]
    ],
    "IPython.utils.coloransi.ColorSchemeTable.set_active_scheme": "(self, scheme, case_sensitive=0)",
    "IPython.utils.PyColorize.Parser.format": "(self, raw, out='None', scheme='<object object at 0xffffff>')",
    "IPython.utils.PyColorize.Parser.format2": "(self, raw, out='None')",
    "IPython.utils.ipstruct.Struct.allow_new_attr": "(self, allow=True)",
    "IPython.utils.ipstruct.Struct.copy": "(self)",
    "IPython.utils.ipstruct.Struct.dict": "(self)",
    "BUILTIN.Struct.fromkeys": [
      [
        "iterable",
        {
          "kind": "POSITIONAL_ONLY",
          "name": "iterable",
          "default": "<class 'inspect._empty'>"
        }
      ],
      [
        "value",
        {
          "kind": "POSITIONAL_ONLY",
          "name": "value",
          "default": "None"
        }
      ]
    ],
    "IPython.utils.ipstruct.Struct.hasattr": "(self, key)",
    "IPython.utils.ipstruct.Struct.merge": "(self, __loc_data__='None', _Struct__conflict_solve='None', **kw)",
    "IPython.utils.coloransi.make_color_table": "(in_class)",
    "IPython.core.debugger.decorate_fn_with_doc": "(new_fn, old_fn, additional_text='')",
    "IPython.core.excolors.exception_colors": "()",
    "IPython.core.getipython.get_ipython": "()",
    "IPython.core.debugger.make_arrow": "(pad)",
    "IPython.utils.py3compat.buffer_to_bytes": "(buf)",
    "IPython.utils.py3compat.cast_bytes": "(s, encoding='None')",
    "IPython.utils.py3compat.no_code": "(x, encoding='None')",
    "IPython.utils.py3compat.cast_unicode": "(s, encoding='None')",
    "IPython.utils.py3compat.decode": "(s, encoding='None')",
    "IPython.utils.py3compat.encode": "(u, encoding='None')",
    "IPython.utils.py3compat.execfile": "(fname, glob, loc='None', compiler='None')",
    "IPython.utils.py3compat.isidentifier": "(s, dotted=False)",
    "IPython.utils.py3compat.safe_unicode": "(e)",
    "IPython.core.debugger.set_trace": "(frame='None')",
    "IPython.testing.skipdoctest.skip_doctest": "(f)",
    "IPython.core.debugger.strip_indentation": "(multiline_string)",
    "IPython.core.ultratb.eqrepr": "(value, repr='<function text_repr at 0xffffff>')",
    "IPython.utils.terminal.get_terminal_size": "(defaultx=80, defaulty=25)",
    "IPython.core.ultratb.nullrepr": "(value, repr='<function text_repr at 0xffffff>')",
    "IPython.core.ultratb.text_repr": "(value)",
    "IPython.utils.path.compress_user": "(path)",
    "IPython.utils.path.ensure_dir_exists": "(path, mode=493)",
    "IPython.utils.path.expand_path": "(s)",
    "IPython.utils.path.filefind": "(filename, path_dirs='None')",
    "IPython.utils.path.get_home_dir": "(require_writable=False)",
    "IPython.utils.path.get_ipython_cache_dir": "()",
    "IPython.utils.path.get_ipython_dir": "()",
    "IPython.utils.path.get_ipython_module_path": "(module_str)",
    "IPython.utils.path.get_ipython_package_dir": "()",
    "IPython.utils.path.get_long_path_name": "(path)",
    "IPython.utils.path.get_py_filename": "(name, force_win32='None')",
    "IPython.utils.path.get_xdg_cache_dir": "()",
    "IPython.utils.path.get_xdg_dir": "()",
    "IPython.utils.path.link": "(src, dst)",
    "IPython.utils.path.link_or_copy": "(src, dst)",
    "IPython.utils.path.locate_profile": "(profile='default')",
    "IPython.utils.path.shellglob": "(args)",
    "IPython.utils._process_posix.ProcessHandler.system": "(cmd)",
    "IPython.utils.path.target_outdated": "(target, deps)",
    "IPython.utils.path.target_update": "(target, deps, cmd)",
    "IPython.utils.decorators.undoc": "(func)",
    "IPython.utils.path.unescape_glob": "(string)",
    "IPython.utils.path.unquote_filename": "(name, win32=False)",
    "IPython.paths.get_ipython_dir": "()",
    "IPython.paths.get_ipython_package_dir": "()",
    "IPython.core.autocall.IPyAutocall.set_ip": "(self, ip)",
    "IPython.core.builtin_trap.BuiltinTrap.activate": "(self)",
    "IPython.core.builtin_trap.BuiltinTrap.add_builtin": "(self, key, value)",
    "IPython.core.builtin_trap.BuiltinTrap.deactivate": "(self)",
    "IPython.core.builtin_trap.BuiltinTrap.remove_builtin": "(self, key, orig)",
    "IPython.core.compilerop.CachingCompiler.ast_parse": "(self, source, filename='<unknown>', symbol='exec')",
    "IPython.core.compilerop.CachingCompiler.cache": "(self, code, number=0)",
    "IPython.core.compilerop.CachingCompiler.extra_flags": "(self, flags)",
    "IPython.core.compilerop.CachingCompiler.reset_compiler_flags": "(self)",
    "IPython.core.compilerop.check_linecache_ipython": "(*args)",
    "IPython.core.compilerop.code_name": "(code, number=0)",
    "IPython.core.completer.Completer.attr_matches": "(self, text)",
    "IPython.core.completer.Completer.complete": "(self, text, state)",
    "IPython.core.completer.Completer.global_matches": "(self, text)",
    "IPython.core.completer.CompletionSplitter.split_line": "(self, line, cursor_pos='None')",
    "IPython.core.completer.IPCompleter.all_completions": "(self, text)",
    "IPython.core.completer.IPCompleter.complete": "(self, text='None', line_buffer='None', cursor_pos='None')",
    "IPython.core.completer.IPCompleter.completions": "(self, text, offset)",
    "IPython.core.completer.IPCompleter.dict_key_matches": "(self, text)",
    "IPython.core.completer.IPCompleter.dispatch_custom_completer": "(self, text)",
    "IPython.core.completer.IPCompleter.file_matches": "(self, text)",
    "IPython.core.completer.IPCompleter.fwd_unicode_match": "(self, text)",
    "IPython.core.completer.IPCompleter.latex_matches": "(self, text)",
    "IPython.core.completer.IPCompleter.magic_color_matches": "(self, text)",
    "IPython.core.completer.IPCompleter.magic_config_matches": "(self, text)",
    "IPython.core.completer.IPCompleter.magic_matches": "(self, text)",
    "IPython.core.completer.IPCompleter.python_func_kw_matches": "(self, text)",
    "IPython.core.completer.IPCompleter.python_matches": "(self, text)",
    "IPython.core.completer.IPCompleter.unicode_name_matches": "(text)",
    "IPython.utils._process_common.arg_split": "(s, posix=False, strict=True)",
    "IPython.core.completer.back_latex_name_matches": "(text)",
    "IPython.core.completer.back_unicode_name_matches": "(text)",
    "IPython.core.completer.completions_sorting_key": "(word)",
    "IPython.core.completer.compress_user": "(path, tilde_expand, tilde_val)",
    "IPython.core.completer.cursor_to_position": "(text, line, column)",
    "IPython.utils.dir2.dir2": "(obj)",
    "IPython.core.completer.expand_user": "(path)",
    "IPython.utils.generics.complete_object": "(obj, prev_completions)",
    "IPython.utils.generics.inspect_object": "(obj)",
    "IPython.core.completer.get__all__entries": "(obj)",
    "IPython.utils.dir2.get_real_method": "(obj, name)",
    "IPython.core.completer.has_open_quotes": "(s)",
    "IPython.core.completer.match_dict_keys": "(keys, prefix, delims)",
    "IPython.core.completer.position_to_cursor": "(text, offset)",
    "IPython.core.completer.protect_filename": "(s, protectables=' ()[]{}?=\\\\|;:\\'#*\"^&')",
    "IPython.core.completer.provisionalcompleter": "(action='ignore')",
    "IPython.core.completer.rectify_completions": "(text, completions, *, _debug=False)",
    "IPython.core.display.DisplayObject.reload": "(self)",
    "IPython.core.display.Image.reload": "(self)",
    "IPython.core.display.ProgressBar.display": "(self)",
    "IPython.core.display.ProgressBar.update": "(self)",
    "IPython.core.display.Video.reload": "(self)",
    "IPython.core.display.__getattr__": "(name)",
    "IPython.core.display_functions.DisplayHandle.display": "(self, obj, **kwargs)",
    "IPython.core.display_functions.DisplayHandle.update": "(self, obj, **kwargs)",
    "IPython.core.display_functions.clear_output": "(wait=False)",
    "IPython.core.display_functions.display": "(*objs, include='None', exclude='None', metadata='None', transient='None', display_id='None', **kwargs)",
    "IPython.core.display_functions.publish_display_data": "(data, metadata='None', source='None', *, transient='None', **kwargs)",
    "IPython.core.display_functions.update_display": "(obj, *, display_id, **kwargs)",
    "IPython.core.display.display_html": "(*objs, **kwargs)",
    "IPython.core.display.display_javascript": "(*objs, **kwargs)",
    "IPython.core.display.display_jpeg": "(*objs, **kwargs)",
    "IPython.core.display.display_json": "(*objs, **kwargs)",
    "IPython.core.display.display_latex": "(*objs, **kwargs)",
    "IPython.core.display.display_markdown": "(*objs, **kwargs)",
    "IPython.core.display.display_pdf": "(*objs, **kwargs)",
    "IPython.core.display.display_png": "(*objs, **kwargs)",
    "IPython.core.display.display_pretty": "(*objs, **kwargs)",
    "IPython.core.display.display_svg": "(*objs, **kwargs)",
    "IPython.core.display.set_matplotlib_close": "(close=True)",
    "IPython.core.display.set_matplotlib_formats": "(*formats, **kwargs)",
    "IPython.core.displayhook.DisplayHook.check_for_underscore": "(self)",
    "IPython.core.displayhook.DisplayHook.compute_format_data": "(self, result)",
    "IPython.core.displayhook.DisplayHook.cull_cache": "(self)",
    "IPython.core.displayhook.DisplayHook.fill_exec_result": "(self, result)",
    "IPython.core.displayhook.DisplayHook.finish_displayhook": "(self)",
    "IPython.core.displayhook.DisplayHook.flush": "(self)",
    "IPython.core.displayhook.DisplayHook.log_output": "(self, format_dict)",
    "IPython.core.displayhook.DisplayHook.quiet": "(self)",
    "IPython.core.displayhook.DisplayHook.start_displayhook": "(self)",
    "IPython.core.displayhook.DisplayHook.update_user_ns": "(self, result)",
    "IPython.core.displayhook.DisplayHook.write_format_data": "(self, format_dict, md_dict='None')",
    "IPython.core.displayhook.DisplayHook.write_output_prompt": "(self)",
    "IPython.core.displaypub.CapturingDisplayPublisher.clear_output": "(self, wait=False)",
    "IPython.core.displaypub.CapturingDisplayPublisher.publish": "(self, data, metadata='None', source='None', *, transient='None', update=False)",
    "IPython.core.displaypub.DisplayPublisher.clear_output": "(self, wait=False)",
    "IPython.core.displaypub.DisplayPublisher.publish": "(self, data, metadata='None', source='None', *, transient='None', update=False, **kwargs)",
    "IPython.core.events.EventManager.register": "(self, event, function)",
    "IPython.core.events.EventManager.trigger": "(self, event, *args, **kwargs)",
    "IPython.core.events.EventManager.unregister": "(self, event, function)",
    "IPython.core.events.post_execute": "()",
    "IPython.core.events.post_run_cell": "(result)",
    "IPython.core.events.pre_execute": "()",
    "IPython.core.events.pre_run_cell": "(info)",
    "IPython.core.events.shell_initialized": "(ip)",
    "IPython.core.extensions.ExtensionManager.install_extension": "(self, url, filename='None')",
    "IPython.core.extensions.ExtensionManager.load_extension": "(self, module_str)",
    "IPython.core.extensions.ExtensionManager.reload_extension": "(self, module_str)",
    "IPython.core.extensions.ExtensionManager.unload_extension": "(self, module_str)",
    "IPython.core.formatters.BaseFormatter.for_type": "(self, typ, func='None')",
    "IPython.core.formatters.BaseFormatter.for_type_by_name": "(self, type_module, type_name, func='None')",
    "IPython.core.formatters.BaseFormatter.lookup": "(self, obj)",
    "IPython.core.formatters.BaseFormatter.lookup_by_type": "(self, typ)",
    "IPython.core.formatters.BaseFormatter.pop": "(self, typ, default='IPython.core.formatters._raise_key_error')",
    "IPython.core.formatters.DisplayFormatter.format": "(self, obj, include='None', exclude='None')",
    "IPython.core.formatters.catch_format_error": "(method, self, *args, **kwargs)",
    "IPython.core.formatters.format_display_data": "(obj, include='None', exclude='None')",
    "IPython.lib.pretty.Breakable.output": "(self, stream, output_width)",
    "IPython.lib.pretty.CallExpression.factory": "(name)",
    "IPython.lib.pretty.Printable.output": "(self, stream, output_width)",
    "IPython.lib.pretty.GroupQueue.deq": "(self)",
    "IPython.lib.pretty.GroupQueue.enq": "(self, group)",
    "IPython.lib.pretty.GroupQueue.remove": "(self, group)",
    "IPython.lib.pretty.PrettyPrinter.begin_group": "(self, indent=0, open='')",
    "IPython.lib.pretty.PrettyPrinter.break_": "(self)",
    "IPython.lib.pretty.PrettyPrinter.breakable": "(self, sep=' ')",
    "IPython.lib.pretty.PrettyPrinter.end_group": "(self, dedent=0, close='')",
    "IPython.lib.pretty.PrettyPrinter.flush": "(self)",
    "IPython.lib.pretty._PrettyPrinterBase.group": "(self, indent=0, open='', close='')",
    "IPython.lib.pretty._PrettyPrinterBase.indent": "(self, indent)",
    "IPython.lib.pretty.PrettyPrinter.text": "(self, obj)",
    "IPython.lib.pretty.RepresentationPrinter.pretty": "(self, obj)",
    "IPython.lib.pretty.Text.add": "(self, obj, width)",
    "IPython.lib.pretty.Text.output": "(self, stream, output_width)",
    "IPython.lib.pretty.for_type": "(typ, func)",
    "IPython.lib.pretty.for_type_by_name": "(type_module, type_name, func)",
    "IPython.lib.pretty.pprint": "(obj, verbose=False, max_width=79, newline='\\n', max_seq_length=1000)",
    "IPython.lib.pretty.pretty": "(obj, verbose=False, max_width=79, newline='\\n', max_seq_length=1000)",
    "IPython.core.history.DummyDB.commit": "(self, *args, **kwargs)",
    "IPython.core.history.DummyDB.execute": "(*args, **kwargs)",
    "IPython.core.history.HistoryAccessor.get_last_session_id": "(self)",
    "IPython.core.history.HistoryAccessor.get_range": "(self, session, start=1, stop='None', raw=True, output=False)",
    "IPython.core.history.HistoryAccessor.get_range_by_str": "(self, rangestr, raw=True, output=False)",
    "IPython.core.history.HistoryAccessor.get_session_info": "(self, session)",
    "IPython.core.history.HistoryAccessor.get_tail": "(self, n=10, raw=True, output=False, include_latest=False)",
    "IPython.core.history.HistoryAccessor.init_db": "(self)",
    "IPython.core.history.HistoryAccessor.search": "(self, pattern='*', raw=True, search_raw=True, output=False, n='None', unique=False)",
    "IPython.core.history.HistoryAccessor.writeout_cache": "(self)",
    "IPython.core.history.HistoryAccessorBase.get_range": "(self, session, start=1, stop='None', raw=True, output=False)",
    "IPython.core.history.HistoryAccessorBase.get_range_by_str": "(self, rangestr, raw=True, output=False)",
    "IPython.core.history.HistoryAccessorBase.get_tail": "(self, n=10, raw=True, output=False, include_latest=False)",
    "IPython.core.history.HistoryAccessorBase.search": "(self, pattern='*', raw=True, search_raw=True, output=False, n='None', unique=False)",
    "IPython.core.history.HistoryManager.end_session": "(self)",
    "IPython.core.history.HistoryManager.get_range": "(self, session=0, start=1, stop='None', raw=True, output=False)",
    "IPython.core.history.HistoryManager.get_session_info": "(self, session=0)",
    "IPython.core.history.HistoryManager.name_session": "(self, name)",
    "IPython.core.history.HistoryManager.new_session": "(self, conn='None')",
    "IPython.core.history.HistoryManager.reset": "(self, new_session=True)",
    "IPython.core.history.HistoryManager.store_inputs": "(self, line_num, source, source_raw='None')",
    "IPython.core.history.HistoryManager.store_output": "(self, line_num)",
    "IPython.core.history.HistoryManager.writeout_cache": "(self, conn='None')",
    "IPython.core.history.HistorySavingThread.run": "(self)",
    "IPython.core.history.HistorySavingThread.stop": "(self)",
    "IPython.core.history.catch_corrupt_db": "(f, self, *a, **kw)",
    "IPython.core.history.extract_hist_ranges": "(ranges_str)",
    "IPython.paths.locate_profile": "(profile='default')",
    "IPython.core.history.only_when_enabled": "(f, self, *a, **kw)",
    "IPython.core.hooks.CommandChainDispatcher.add": "(self, func, priority=0)",
    "IPython.core.hooks.clipboard_get": "(self)",
    "IPython.core.hooks.editor": "(self, filename, linenum='None', wait=True)",
    "IPython.core.hooks.late_startup_hook": "(self)",
    "IPython.core.hooks.pre_prompt_hook": "(self)",
    "IPython.core.hooks.pre_run_code_hook": "(self)",
    "IPython.core.hooks.show_in_pager": "(self, data, start, screen_lines)",
    "IPython.core.hooks.shutdown_hook": "(self)",
    "IPython.core.hooks.synchronize_with_editor": "(self, filename, linenum, column)",
    "IPython.core.inputtransformer2.EscapedCommand.find": "(tokens_by_line)",
    "IPython.core.inputtransformer2.TokenTransformBase.sortby": "(self)",
    "IPython.core.inputtransformer2.EscapedCommand.transform": "(self, lines)",
    "IPython.core.inputtransformer2.HelpEnd.find": "(tokens_by_line)",
    "IPython.core.inputtransformer2.HelpEnd.transform": "(self, lines)",
    "IPython.core.inputtransformer2.MagicAssign.find": "(tokens_by_line)",
    "IPython.core.inputtransformer2.MagicAssign.transform": "(self, lines)",
    "IPython.core.inputtransformer2.SystemAssign.find": "(tokens_by_line)",
    "IPython.core.inputtransformer2.SystemAssign.transform": "(self, lines)",
    "IPython.core.inputtransformer2.TokenTransformBase.find": "(tokens_by_line)",
    "IPython.core.inputtransformer2.TokenTransformBase.transform": "(self, lines)",
    "IPython.core.inputtransformer2.TransformerManager.check_complete": "(self, cell)",
    "IPython.core.inputtransformer2.TransformerManager.do_one_token_transform": "(self, lines)",
    "IPython.core.inputtransformer2.TransformerManager.do_token_transforms": "(self, lines)",
    "IPython.core.inputtransformer2.TransformerManager.transform_cell": "(self, cell)",
    "IPython.core.inputtransformer2.assemble_continued_line": "(lines, start, end_line)",
    "IPython.core.inputtransformer2.cell_magic": "(lines)",
    "IPython.core.inputtransformer2.find_end_of_continued_line": "(lines, start_line)",
    "IPython.core.inputtransformer2.find_last_indent": "(lines)",
    "IPython.core.inputtransformer2.leading_empty_lines": "(lines)",
    "IPython.core.inputtransformer2.leading_indent": "(lines)",
    "IPython.core.inputtransformer2.make_tokens_by_line": "(lines)",
    "IPython.core.inputtransformer2.show_linewise_tokens": "(s)",
    "IPython.utils.text.DollarFormatter.parse": "(self, fmt_string)",
    "IPython.utils.text.FullEvalFormatter.vformat": "(self, format_string, args, kwargs)",
    "IPython.core.interactiveshell.ExecutionResult.raise_error": "(self)",
    "IPython.utils.text.LSString.get_list": "(self)",
    "IPython.utils.text.LSString.get_nlstr": "(self)",
    "IPython.utils.text.LSString.get_paths": "(self)",
    "IPython.utils.text.LSString.get_spstr": "(self)",
    "IPython.core.logger.Logger.logstop": "(self)",
    "IPython.core.logger.Logger.log": "(self, line_mod, line_ori)",
    "IPython.core.logger.Logger.log_write": "(self, data, kind='input')",
    "IPython.core.logger.Logger.logstart": "(self, logfname='None', loghead='None', logmode='None', log_output=False, timestamp=False, log_raw_input=False)",
    "IPython.core.logger.Logger.logstate": "(self)",
    "IPython.core.logger.Logger.switch_log": "(self, val)",
    "IPython.core.payload.PayloadManager.clear_payload": "(self)",
    "IPython.core.payload.PayloadManager.read_payload": "(self)",
    "IPython.core.payload.PayloadManager.write_payload": "(self, data, single=True)",
    "IPython.core.prefilter.PrefilterManager.find_handler": "(self, line_info)",
    "IPython.core.prefilter.PrefilterManager.get_handler_by_esc": "(self, esc_str)",
    "IPython.core.prefilter.PrefilterManager.get_handler_by_name": "(self, name)",
    "IPython.core.prefilter.PrefilterManager.init_checkers": "(self)",
    "IPython.core.prefilter.PrefilterManager.init_handlers": "(self)",
    "IPython.core.prefilter.PrefilterManager.prefilter_line": "(self, line, continue_prompt=False)",
    "IPython.core.prefilter.PrefilterManager.prefilter_line_info": "(self, line_info)",
    "IPython.core.prefilter.PrefilterManager.prefilter_lines": "(self, lines, continue_prompt=False)",
    "IPython.core.prefilter.PrefilterManager.register_checker": "(self, checker)",
    "IPython.core.prefilter.PrefilterManager.register_handler": "(self, name, handler, esc_strings)",
    "IPython.core.prefilter.PrefilterManager.register_transformer": "(self, transformer)",
    "IPython.core.prefilter.PrefilterManager.sort_checkers": "(self)",
    "IPython.core.prefilter.PrefilterManager.sort_transformers": "(self)",
    "IPython.core.prefilter.PrefilterManager.transform_line": "(self, line, continue_prompt)",
    "IPython.core.prefilter.PrefilterManager.unregister_checker": "(self, checker)",
    "IPython.core.prefilter.PrefilterManager.unregister_handler": "(self, name, handler, esc_strings)",
    "IPython.core.prefilter.PrefilterManager.unregister_transformer": "(self, transformer)",
    "IPython.utils.text.SList.fields": "(self, *fields)",
    "IPython.utils.text.SList.get_list": "(self)",
    "IPython.utils.text.SList.get_nlstr": "(self)",
    "IPython.utils.text.SList.get_paths": "(self)",
    "IPython.utils.text.SList.get_spstr": "(self)",
    "IPython.utils.text.SList.grep": "(self, pattern, prune=False, field='None')",
    "IPython.utils.text.SList.sort": "(self, field='None', nums=False)",
    "IPython.core.interactiveshell.SeparateUnicode.validate": "(self, obj, value)",
    "IPython.utils.strdispatch.StrDispatch.add_re": "(self, regex, obj, priority=0)",
    "IPython.utils.strdispatch.StrDispatch.add_s": "(self, s, obj, priority=0)",
    "IPython.utils.strdispatch.StrDispatch.dispatch": "(self, key)",
    "IPython.utils.strdispatch.StrDispatch.flat_matches": "(self, key)",
    "IPython.utils.strdispatch.StrDispatch.s_matches": "(self, key)",
    "IPython.utils.io.ask_yes_no": "(prompt, default='None', interrupt='None')",
    "IPython.utils.text.format_screen": "(strng)",
    "IPython.core.interactiveshell.get_default_colors": "()",
    "IPython.utils._process_common.getoutput": "(cmd)",
    "IPython.utils.capture.CapturedIO.show": "(self)",
    "IPython.utils.io.IOStream.close": "(self)",
    "IPython.utils.io.IOStream.write": "(self, data)",
    "IPython.utils.io.IOStream.writelines": "(self, lines)",
    "IPython.utils.io.Tee.close": "(self)",
    "IPython.utils.io.Tee.flush": "(self)",
    "IPython.utils.io.Tee.write": "(self, data)",
    "IPython.utils.io.atomic_writing": "(*args, **kwargs)",
    "IPython.utils.io.raw_print": "(*args, **kw)",
    "IPython.utils.io.raw_print_err": "(*args, **kw)",
    "IPython.utils.io.temp_pyfile": "(src, ext='.py')",
    "IPython.utils.io.unicode_std_stream": "(stream='stdout')",
    "IPython.core.magic.Magics.arg_err": "(self, func)",
    "IPython.core.magic.Magics.default_option": "(self, fn, optstr)",
    "IPython.core.magic.Magics.format_latex": "(self, strng)",
    "IPython.core.magic.Magics.parse_options": "(self, arg_str, opt_str, *long_opts, **kw)",
    "IPython.core.magic.MagicsManager.auto_status": "(self)",
    "IPython.core.magic.MagicsManager.lsmagic": "(self)",
    "IPython.core.magic.MagicsManager.lsmagic_docs": "(self, brief=False, missing='')",
    "IPython.core.magic.MagicsManager.register": "(self, *magic_objects)",
    "IPython.core.magic.MagicsManager.register_alias": "(self, alias_name, magic_name, magic_kind='line', magic_params='None')",
    "IPython.core.magic._method_magic_marker.<locals>.magic_deco": "(arg)",
    "IPython.core.magic.compress_dhist": "(dh)",
    "IPython.utils.text.dedent": "(text)",
    "IPython.core.magic.magics_class": "(cls)",
    "IPython.core.magic.needs_local_scope": "(func)",
    "IPython.core.magic.no_var_expand": "(magic_func)",
    "IPython.core.oinspect.Inspector.format_mime": "(self, bundle)",
    "IPython.core.oinspect.Inspector.info": "(self, obj, oname='', formatter='None', info='None', detail_level=0)",
    "IPython.core.oinspect.Inspector.noinfo": "(self, msg, oname)",
    "IPython.core.oinspect.Inspector.pdef": "(self, obj, oname='')",
    "IPython.core.oinspect.Inspector.pdoc": "(self, obj, oname='', formatter='None')",
    "IPython.core.oinspect.Inspector.pfile": "(self, obj, oname='')",
    "IPython.core.oinspect.Inspector.pinfo": "(self, obj, oname='', formatter='None', info='None', detail_level=0, enable_html_pager=True)",
    "IPython.core.oinspect.Inspector.psearch": "(self, pattern, ns_table, ns_search='[]', ignore_case=False, show_all=False, *, list_types=False)",
    "IPython.core.oinspect.Inspector.psource": "(self, obj, oname='')",
    "IPython.core.oinspect.Inspector.set_active_scheme": "(self, scheme)",
    "IPython.core.oinspect.call_tip": "(oinfo, format_call=True)",
    "IPython.core.oinspect.find_file": "(obj)",
    "IPython.core.oinspect.find_source_lines": "(obj)",
    "IPython.core.oinspect.format_argspec": "(argspec)",
    "IPython.core.oinspect.get_encoding": "(obj)",
    "IPython.core.oinspect.getargspec": "(obj)",
    "IPython.core.oinspect.getdoc": "(obj)",
    "IPython.core.oinspect.getsource": "(obj, oname='')",
    "IPython.utils.text.indent": "(instr, nspaces=4, ntabs=0, flatten=False)",
    "IPython.core.oinspect.is_simple_callable": "(obj)",
    "IPython.utils.wildcard.list_namespace": "(namespace, type_pattern, filter, ignore_case=False, show_all=False)",
    "IPython.core.oinspect.object_info": "(**kw)",
    "IPython.utils.openpy.read_py_file": "(filename, skip_encoding_cookie=True)",
    "IPython.utils.openpy.read_py_url": "(url, errors='replace', skip_encoding_cookie=True)",
    "IPython.utils.openpy.source_to_unicode": "(txt, errors='replace', skip_encoding_cookie=True)",
    "IPython.utils.openpy.strip_encoding_cookie": "(filelike)",
    "IPython.core.page.as_hook": "(page_func)",
    "IPython.utils.data.chop": "(seq, size)",
    "IPython.core.page.display_page": "(strng, start=0, screen_lines=25)",
    "IPython.core.page.get_pager_cmd": "(pager_cmd='None')",
    "IPython.core.page.get_pager_start": "(pager, start)",
    "IPython.core.page.page": "(data, start=0, screen_lines=0, pager_cmd='None')",
    "IPython.core.page.page_dumb": "(strng, start=0, screen_lines=25)",
    "IPython.core.page.page_file": "(fname, start=0, pager_cmd='None')",
    "IPython.core.page.page_more": "()",
    "IPython.core.page.pager_page": "(strng, start=0, screen_lines=0, pager_cmd='None')",
    "IPython.core.oinspect.pylight": "(code)",
    "IPython.utils.dir2.safe_hasattr": "(obj, attr)",
    "IPython.core.magic.on_off": "(tag)",
    "IPython.core.magic.record_magic": "(dct, magic_kind, magic_name, func)",
    "IPython.core.magic._function_magic_marker.<locals>.magic_deco": "(arg)",
    "IPython.core.magic.validate_type": "(magic_kind)",
    "IPython.core.interactiveshell.no_op": "(*a, **kw)",
    "IPython.core.prefilter.AssignmentChecker.check": "(self, line_info)",
    "IPython.core.prefilter.AutoHandler.handle": "(self, line_info)",
    "IPython.core.prefilter.AutoMagicChecker.check": "(self, line_info)",
    "IPython.core.prefilter.AutocallChecker.check": "(self, line_info)",
    "IPython.core.prefilter.EmacsChecker.check": "(self, line_info)",
    "IPython.core.prefilter.EmacsHandler.handle": "(self, line_info)",
    "IPython.core.prefilter.IPyAutocallChecker.check": "(self, line_info)",
    "IPython.core.splitinput.LineInfo.ofind": "(self, ip)",
    "IPython.core.prefilter.MacroChecker.check": "(self, line_info)",
    "IPython.core.prefilter.MacroHandler.handle": "(self, line_info)",
    "IPython.core.prefilter.MagicHandler.handle": "(self, line_info)",
    "IPython.core.prefilter.PrefilterChecker.check": "(self, line_info)",
    "IPython.core.prefilter.PrefilterHandler.handle": "(self, line_info)",
    "IPython.core.prefilter.PrefilterTransformer.transform": "(self, line, continue_prompt)",
    "IPython.core.prefilter.PythonOpsChecker.check": "(self, line_info)",
    "IPython.core.prefilter.is_shadowed": "(identifier, ip)",
    "IPython.core.interactiveshell.removed_co_newlocals": "(function)",
    "IPython.core.interactiveshell.softspace": "(file, newvalue)",
    "IPython.core.magic_arguments.ArgDecorator.add_to_parser": "(self, parser, group)",
    "IPython.core.magic_arguments.ArgMethodWrapper.add_to_parser": "(self, parser, group)",
    "IPython.core.magic_arguments.MagicArgumentParser.error": "(self, message)",
    "IPython.core.magic_arguments.MagicArgumentParser.parse_argstring": "(self, argstring)",
    "IPython.core.magic_arguments.MagicHelpFormatter.add_usage": "(self, usage, actions, groups, prefix='::\\n\\n  %')",
    "IPython.core.magic_arguments.argument_group.add_to_parser": "(self, parser, group)",
    "IPython.core.magic_arguments.construct_parser": "(magic_func)",
    "IPython.core.magic_arguments.parse_argstring": "(magic_func, argstring)",
    "IPython.core.magic_arguments.real_name": "(magic_func)",
    "IPython.core.magics.basic.BasicMagics.alias_magic": "(self, line='')",
    "IPython.core.magics.basic.AsyncMagics.autoawait": "(self, parameter_s)",
    "IPython.core.magics.basic.BasicMagics.colors": "(self, parameter_s='')",
    "IPython.core.magics.basic.BasicMagics.doctest_mode": "(self, parameter_s='')",
    "IPython.core.magics.basic.BasicMagics.gui": "(self, parameter_s='')",
    "IPython.core.magics.basic.BasicMagics.lsmagic": "(self, parameter_s='')",
    "IPython.core.magics.basic.BasicMagics.magic": "(self, parameter_s='')",
    "IPython.core.magics.basic.BasicMagics.notebook": "(self, s)",
    "IPython.core.magics.basic.BasicMagics.page": "(self, parameter_s='')",
    "IPython.core.magics.basic.BasicMagics.pprint": "(self, parameter_s='')",
    "IPython.core.magics.basic.BasicMagics.precision": "(self, s='')",
    "IPython.core.magics.basic.BasicMagics.quickref": "(self, arg)",
    "IPython.core.magics.basic.BasicMagics.xmode": "(self, parameter_s='')",
    "IPython.core.magics.auto.AutoMagics.autocall": "(self, parameter_s='')",
    "IPython.core.magics.auto.AutoMagics.automagic": "(self, parameter_s='')",
    "IPython.core.magics.code.CodeMagics.edit": "(self, parameter_s='', last_call=\"['', '']\")",
    "IPython.core.magics.code.CodeMagics.load": "(self, arg_s)",
    "IPython.core.magics.code.CodeMagics.loadpy": "(self, arg_s)",
    "IPython.core.magics.code.CodeMagics.pastebin": "(self, parameter_s='')",
    "IPython.core.magics.code.CodeMagics.save": "(self, parameter_s='')",
    "IPython.core.magics.config.ConfigMagics.config": "(self, s)",
    "IPython.core.magics.display.DisplayMagics.html": "(self, line, cell)",
    "IPython.core.magics.display.DisplayMagics.javascript": "(self, line, cell)",
    "IPython.core.magics.display.DisplayMagics.js": "(self, line, cell)",
    "IPython.core.magics.display.DisplayMagics.latex": "(self, line, cell)",
    "IPython.core.magics.display.DisplayMagics.markdown": "(self, line, cell)",
    "IPython.core.magics.display.DisplayMagics.svg": "(self, line, cell)",
    "IPython.core.magics.execution.ExecutionMagics.capture": "(self, line, cell)",
    "IPython.core.magics.execution.ExecutionMagics.debug": "(self, line='', cell='None')",
    "IPython.core.magics.execution.ExecutionMagics.macro": "(self, parameter_s='')",
    "IPython.core.magics.execution.ExecutionMagics.pdb": "(self, parameter_s='')",
    "IPython.core.magics.execution.ExecutionMagics.prun": "(self, parameter_s='', cell='None')",
    "IPython.core.magics.execution.ExecutionMagics.run": "(self, parameter_s='', runner='None', file_finder='<function get_py_filename at 0xffffff>')",
    "IPython.core.magics.execution.ExecutionMagics.tb": "(self, s)",
    "IPython.core.magics.execution.ExecutionMagics.time": "(self, line='', cell='None', local_ns='None')",
    "IPython.core.magics.execution.ExecutionMagics.timeit": "(self, line='', cell='None', local_ns='None')",
    "IPython.core.magics.extension.ExtensionMagics.load_ext": "(self, module_str)",
    "IPython.core.magics.extension.ExtensionMagics.reload_ext": "(self, module_str)",
    "IPython.core.magics.extension.ExtensionMagics.unload_ext": "(self, module_str)",
    "IPython.core.magics.history.HistoryMagics.history": "(self, parameter_s='')",
    "IPython.core.magics.history.HistoryMagics.recall": "(self, arg)",
    "IPython.core.magics.history.HistoryMagics.rerun": "(self, parameter_s='')",
    "IPython.core.magics.logging.LoggingMagics.logoff": "(self, parameter_s='')",
    "IPython.core.magics.logging.LoggingMagics.logon": "(self, parameter_s='')",
    "IPython.core.magics.logging.LoggingMagics.logstart": "(self, parameter_s='')",
    "IPython.core.magics.logging.LoggingMagics.logstate": "(self, parameter_s='')",
    "IPython.core.magics.logging.LoggingMagics.logstop": "(self, parameter_s='')",
    "IPython.core.magics.namespace.NamespaceMagics.pdef": "(self, parameter_s='', namespaces='None')",
    "IPython.core.magics.namespace.NamespaceMagics.pdoc": "(self, parameter_s='', namespaces='None')",
    "IPython.core.magics.namespace.NamespaceMagics.pfile": "(self, parameter_s='', namespaces='None')",
    "IPython.core.magics.namespace.NamespaceMagics.pinfo": "(self, parameter_s='', namespaces='None')",
    "IPython.core.magics.namespace.NamespaceMagics.pinfo2": "(self, parameter_s='', namespaces='None')",
    "IPython.core.magics.namespace.NamespaceMagics.psearch": "(self, parameter_s='')",
    "IPython.core.magics.namespace.NamespaceMagics.psource": "(self, parameter_s='', namespaces='None')",
    "IPython.core.magics.namespace.NamespaceMagics.reset": "(self, parameter_s='')",
    "IPython.core.magics.namespace.NamespaceMagics.reset_selective": "(self, parameter_s='')",
    "IPython.core.magics.namespace.NamespaceMagics.who": "(self, parameter_s='')",
    "IPython.core.magics.namespace.NamespaceMagics.who_ls": "(self, parameter_s='')",
    "IPython.core.magics.namespace.NamespaceMagics.whos": "(self, parameter_s='')",
    "IPython.core.magics.namespace.NamespaceMagics.xdel": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.alias": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.sx": "(self, line='', cell='None')",
    "IPython.core.magics.osm.OSMagics.bookmark": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.cd": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.dhist": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.dirs": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.env": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.isexec": "(self, file)",
    "IPython.core.magics.osm.OSMagics.popd": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.pushd": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.pwd": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.pycat": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.rehashx": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.sc": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.set_env": "(self, parameter_s)",
    "IPython.core.magics.osm.OSMagics.unalias": "(self, parameter_s='')",
    "IPython.core.magics.osm.OSMagics.writefile": "(self, line, cell)",
    "IPython.core.magics.packaging.PackagingMagics.conda": "(self, line)",
    "IPython.core.magics.packaging.PackagingMagics.pip": "(self, line)",
    "IPython.core.magics.pylab.PylabMagics.matplotlib": "(self, line='')",
    "IPython.core.magics.pylab.PylabMagics.pylab": "(self, line='')",
    "IPython.core.magics.script.ScriptMagics.kill_bg_processes": "(self)",
    "IPython.core.magics.script.ScriptMagics.killbgscripts": "(self, _nouse_='')",
    "IPython.core.magics.script.ScriptMagics.shebang": "(self, line, cell)",
    "IPython.core.magics.code.extract_code_ranges": "(ranges_str)",
    "IPython.core.magics.code.extract_symbols": "(code, symbols)",
    "IPython.utils.text.get_text_list": "(list_, last_sep=' and ', sep=', ', wrap_item_with='')",
    "IPython.core.magics.code.strip_initial_indent": "(lines)",
    "IPython.core.magics.execution.TimeitTemplateFiller.visit_For": "(self, node)",
    "IPython.core.magics.execution.TimeitTemplateFiller.visit_FunctionDef": "(self, node)",
    "IPython.core.magics.execution.Timer.timeit": "(self, number=1000000)",
    "IPython.utils.timing.clock": "()",
    "IPython.utils.timing.clock2": "()",
    "IPython.utils.module_paths.find_mod": "(module_name)",
    "IPython.core.magics.execution.parse_breakpoint": "(text, current_file)",
    "IPython.utils.process.abbrev_cwd": "()",
    "IPython.utils.terminal.set_term_title": "(title)",
    "IPython.lib.backgroundjobs.BackgroundJobManager.flush": "(self)",
    "IPython.lib.backgroundjobs.BackgroundJobManager.new": "(self, func_or_exp, *args, **kwargs)",
    "IPython.lib.backgroundjobs.BackgroundJobManager.remove": "(self, num)",
    "IPython.lib.backgroundjobs.BackgroundJobManager.result": "(self, num)",
    "IPython.lib.backgroundjobs.BackgroundJobManager.status": "(self, verbose=0)",
    "IPython.lib.backgroundjobs.BackgroundJobManager.traceback": "(self, job='None')",
    "IPython.core.magics.script.script_args": "(f)",
    "IPython.core.pylabtools.activate_matplotlib": "(backend)",
    "IPython.core.pylabtools.configure_inline_support": "(shell, backend)",
    "IPython.core.pylabtools.figsize": "(sizex, sizey)",
    "IPython.core.pylabtools.find_gui_and_backend": "(gui='None', gui_select='None')",
    "IPython.utils.decorators.flag_calls": "(func)",
    "IPython.core.pylabtools.getfigs": "(*fig_nums)",
    "IPython.core.pylabtools.import_pylab": "(user_ns, import_all=True)",
    "IPython.core.pylabtools.mpl_runner": "(safe_execfile)",
    "IPython.core.pylabtools.print_figure": "(fig, fmt='png', bbox_inches='tight', **kwargs)",
    "IPython.core.pylabtools.retina_figure": "(fig, **kwargs)",
    "IPython.core.pylabtools.select_figure_formats": "(shell, formats, **kwargs)",
    "IPython.core.shellapp.InteractiveShellApp.init_code": "(self)",
    "IPython.core.shellapp.InteractiveShellApp.init_extensions": "(self)",
    "IPython.core.shellapp.InteractiveShellApp.init_gui_pylab": "(self)",
    "IPython.core.shellapp.InteractiveShellApp.init_path": "(self)",
    "IPython.core.shellapp.InteractiveShellApp.init_shell": "(self)",
    "IPython.core.shellapp.<lambda>": "(*args)",
    "IPython.terminal.pt_inputhooks.get_inputhook_name_and_func": "(gui)",
    "IPython.terminal.pt_inputhooks.register": "(name, inputhook)",
    "IPython.utils.encoding.get_stream_enc": "(stream, default='None')",
    "IPython.core.splitinput.split_user_input": "(line, pattern='None')",
    "IPython.lib.display.Audio.autoplay_attr": "(self)",
    "IPython.lib.display.Audio.element_id_attr": "(self)",
    "IPython.lib.display.Audio.reload": "(self)",
    "IPython.lib.display.Audio.src_attr": "(self)",
    "IPython.terminal.embed.embed": "(**kwargs)",
    "IPython.embed_kernel": "(module='None', local_ns='None', **kwargs)",
    "IPython.extensions.storemagic.StoreMagics.store": "(self, parameter_s='')",
    "IPython.extensions.storemagic.load_ipython_extension": "(ip)",
    "IPython.extensions.storemagic.refresh_variables": "(ip)",
    "IPython.extensions.storemagic.restore_aliases": "(ip, alias='None')",
    "IPython.extensions.storemagic.restore_data": "(ip)",
    "IPython.extensions.storemagic.restore_dhist": "(ip)",
    "IPython.utils.frame.extract_module_locals": "(depth=0)",
    "IPython.lib.backgroundjobs.BackgroundJobBase.run": "(self)",
    "IPython.lib.backgroundjobs.BackgroundJobBase.traceback": "(self)",
    "IPython.lib.backgroundjobs.BackgroundJobExpr.call": "(self)",
    "IPython.lib.backgroundjobs.BackgroundJobFunc.call": "(self)",
    "IPython.lib.clipboard.osx_clipboard_get": "()",
    "IPython.lib.clipboard.tkinter_clipboard_get": "()",
    "IPython.lib.clipboard.win32_clipboard_get": "()",
    "IPython.lib.security.passwd": "(passphrase='None', algorithm='sha1')",
    "IPython.lib.security.passwd_check": "(hashed_passphrase, passphrase)",
    "IPython.paths.get_ipython_cache_dir": "()",
    "IPython.paths.get_ipython_module_path": "(module_str)",
    "IPython.utils.importstring.import_item": "(name)",
    "IPython.start_ipython": "(argv='None', **kwargs)",
    "IPython.start_kernel": "(argv='None', **kwargs)",
    "IPython.terminal.ptutils.IPythonPTCompleter.get_completions": "(self, document, complete_event)",
    "IPython.terminal.debugger.TerminalPdb.cmdloop": "(self, intro='None')",
    "IPython.terminal.debugger.TerminalPdb.pt_init": "(self)",
    "IPython.terminal.shortcuts.create_ipython_shortcuts": "(shell)",
    "IPython.terminal.debugger.set_trace": "(frame='None')",
    "IPython.terminal.shortcuts.suspend_to_bg": "(event)",
    "IPython.terminal.embed.EmbeddedMagics.exit_raise": "(self, parameter_s='')",
    "IPython.terminal.embed.EmbeddedMagics.kill_embedded": "(self, parameter_s='')",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.ask_exit": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.auto_rewrite_input": "(self, cmd)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.enable_gui": "(self, gui='None')",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.enable_win_unicode_console": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_alias": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_display_formatter": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_io": "(self)",
    "IPython.terminal.embed.InteractiveShellEmbed.init_magics": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_prompt_toolkit_cli": "(self)",
    "IPython.terminal.embed.InteractiveShellEmbed.init_sys_modules": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.inputhook": "(self, context)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.interact": "(self, display_banner='<object object at 0xffffff>')",
    "IPython.terminal.embed.InteractiveShellEmbed.mainloop": "(self, local_ns='None', module='None', stack_depth=0, display_banner='None', global_ns='None', compile_flags='None')",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.prompt_for_code": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.refresh_style": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.restore_term_title": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.switch_doctest_mode": "(self, mode)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_magics": "(self)",
    "IPython.terminal.interactiveshell.TerminalInteractiveShell.mainloop": "(self, display_banner='<object object at 0xffffff>')",
    "IPython.terminal.ipapp.load_default_config": "(ipython_dir='None')",
    "IPython.terminal.prompts.ClassicPrompts.continuation_prompt_tokens": "(self, width='None')",
    "IPython.terminal.prompts.ClassicPrompts.in_prompt_tokens": "(self)",
    "IPython.terminal.prompts.ClassicPrompts.out_prompt_tokens": "(self)",
    "IPython.terminal.prompts.ClassicPrompts.rewrite_prompt_tokens": "(self)",
    "IPython.terminal.prompts.Prompts.vi_mode": "(self)",
    "IPython.terminal.ptutils.IPythonPTLexer.lex_document": "(self, document)",
    "IPython.terminal.prompts.Prompts.continuation_prompt_tokens": "(self, width='None')",
    "IPython.terminal.prompts.Prompts.in_prompt_tokens": "(self)",
    "IPython.terminal.prompts.Prompts.out_prompt_tokens": "(self)",
    "IPython.terminal.prompts.Prompts.rewrite_prompt_tokens": "(self)",
    "IPython.terminal.prompts.RichPromptDisplayHook.write_format_data": "(self, format_dict, md_dict='None')",
    "IPython.terminal.prompts.RichPromptDisplayHook.write_output_prompt": "(self)",
    "IPython.terminal.magics.TerminalMagics.autoindent": "(self, parameter_s='')",
    "IPython.terminal.magics.TerminalMagics.cpaste": "(self, parameter_s='')",
    "IPython.terminal.magics.TerminalMagics.paste": "(self, parameter_s='')",
    "IPython.terminal.magics.TerminalMagics.preclean_input": "(self, block)",
    "IPython.terminal.magics.TerminalMagics.rerun_pasted": "(self, name='pasted_block')",
    "IPython.terminal.magics.TerminalMagics.store_or_execute": "(self, block, name)",
    "IPython.terminal.interactiveshell.black_reformat_handler": "(text_before_cursor)",
    "IPython.terminal.interactiveshell.get_default_editor": "()",
    "IPython.utils.terminal.restore_term_title": "()",
    "IPython.utils.terminal.toggle_set_term_title": "(val)",
    "IPython.terminal.ipapp.IPAppCrashHandler.make_report": "(self, traceback)",
    "IPython.terminal.ipapp.LocateIPythonApp.start": "(self)",
    "IPython.terminal.ipapp.TerminalIPythonApp.init_banner": "(self)",
    "IPython.terminal.ipapp.TerminalIPythonApp.init_shell": "(self)",
    "IPython.terminal.ipapp.TerminalIPythonApp.initialize": "(self, argv='None')",
    "IPython.terminal.ipapp.TerminalIPythonApp.parse_command_line": "(self, argv='None')",
    "IPython.terminal.ipapp.TerminalIPythonApp.start": "(self)",
    "IPython.terminal.ipapp.<lambda>": "(*args)",
    "IPython.terminal.magics.get_pasted_lines": "(sentinel, l_input='<function input at 0xffffff>', quiet=False)",
    "IPython.utils.text.strip_email_quotes": "(text)",
    "IPython.terminal.shortcuts.dismiss_completion": "(event)",
    "IPython.terminal.shortcuts.force_exit": "(event)",
    "IPython.terminal.shortcuts.indent_buffer": "(event)",
    "IPython.terminal.shortcuts.newline_autoindent_outer": "(inputsplitter)",
    "IPython.terminal.shortcuts.newline_or_execute_outer": "(shell)",
    "IPython.terminal.shortcuts.newline_with_copy_margin": "(event)",
    "IPython.terminal.shortcuts.next_history_or_next_completion": "(event)",
    "IPython.terminal.shortcuts.open_input_in_editor": "(event)",
    "IPython.terminal.shortcuts.previous_history_or_previous_completion": "(event)",
    "IPython.terminal.shortcuts.reformat_text_before_cursor": "(buffer, document, shell)",
    "IPython.terminal.shortcuts.reset_buffer": "(event)",
    "IPython.terminal.shortcuts.reset_search_buffer": "(event)",
    "IPython.testing.test": "(**kwargs)",
    "IPython.utils.capture.RichOutput.display": "(self)",
    "IPython.utils.data.uniq_stable": "(elems)",
    "IPython.utils.encoding.getdefaultencoding": "(prefer_stream=True)",
    "IPython.utils.frame.debugx": "(expr, pre_msg='')",
    "IPython.utils.frame.extract_vars": "(*names, **kw)",
    "IPython.utils.frame.extract_vars_above": "(*names)",
    "IPython.utils._process_posix.check_pid": "(pid)",
    "IPython.utils.process.find_cmd": "(cmd)",
    "IPython.utils._process_common.get_output_error_code": "(cmd)",
    "IPython.utils._process_common.getoutputerror": "(cmd)",
    "IPython.utils._process_common.process_handler": "(cmd, callback, stderr=-1)",
    "IPython.utils.sysinfo.get_sys_info": "()",
    "IPython.utils.sysinfo.num_cpus": "()",
    "IPython.utils.sysinfo.pkg_commit_hash": "(pkg_path)",
    "IPython.utils.sysinfo.pkg_info": "(pkg_path)",
    "IPython.utils.tempdir.NamedFileInTemporaryDirectory.cleanup": "(self)",
    "IPython.utils.terminal.freeze_term_title": "()",
    "IPython.utils.text.EvalFormatter.get_field": "(self, name, args, kwargs)",
    "IPython.utils.text.columnize": "(items, row_first=False, separator='  ', displaywidth=80, spread=False)",
    "IPython.utils.text.compute_item_matrix": "(items, row_first=False, empty='None', *args, **kwargs)",
    "IPython.utils.text.list_strings": "(arg)",
    "IPython.utils.text.long_substr": "(data)",
    "IPython.utils.text.marquee": "(txt='', width=78, mark='*')",
    "IPython.utils.text.num_ini_spaces": "(strng)",
    "IPython.utils.text.strip_ansi": "(source)",
    "IPython.utils.text.wrap_paragraphs": "(text, ncols=80)",
    "IPython.utils.timing.clocks": "()",
    "IPython.utils.timing.clocku": "()",
    "IPython.utils.timing.timing": "(func, *args, **kw)",
    "IPython.utils.timing.timings": "(reps, func, *args, **kw)",
    "IPython.utils.timing.timings_out": "(reps, func, *args, **kw)",
    "IPython.utils.wildcard.create_typestr2type_dicts": "(dont_include_in_type2typestr=\"['lambda']\")",
    "IPython.utils.wildcard.dict_dir": "(obj)",
    "IPython.utils.wildcard.filter_ns": "(ns, name_pattern='*', type_pattern='all', ignore_case=True, show_all=True)",
    "IPython.utils.wildcard.is_type": "(obj, typestr_or_type)",
    "IPython.utils.wildcard.show_hidden": "(str, show_all=False)"
  },
  "type": {
    "IPython.core.debugger.Pdb": {
      "items": {
        "commands_resuming": "['do_continue', 'do_step', 'do_next', 'do_return', 'do_quit', 'do_jump']",
        "do_d": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_debug": "IPython.core.debugger.Pdb.do_debug",
        "do_down": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_l": "IPython.core.debugger.Pdb.do_list",
        "do_list": "IPython.core.debugger.Pdb.do_list",
        "do_ll": "IPython.core.debugger.Pdb.do_longlist",
        "do_longlist": "IPython.core.debugger.Pdb.do_longlist",
        "do_pdef": "IPython.core.debugger.Pdb.do_pdef",
        "do_pdoc": "IPython.core.debugger.Pdb.do_pdoc",
        "do_pfile": "IPython.core.debugger.Pdb.do_pfile",
        "do_pinfo": "IPython.core.debugger.Pdb.do_pinfo",
        "do_pinfo2": "IPython.core.debugger.Pdb.do_pinfo2",
        "do_psource": "IPython.core.debugger.Pdb.do_psource",
        "do_q": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_quit": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_u": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_up": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_w": "IPython.core.debugger.Pdb.do_where",
        "do_where": "IPython.core.debugger.Pdb.do_where",
        "doc_header": "Documented commands (type help <topic>):",
        "format_stack_entry": "IPython.core.debugger.Pdb.format_stack_entry",
        "getsourcelines": "IPython.core.debugger.Pdb.getsourcelines",
        "identchars": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_",
        "interaction": "IPython.core.debugger.Pdb.interaction",
        "intro": "None",
        "misc_header": "Miscellaneous help topics:",
        "new_do_down": "IPython.core.debugger.Pdb.new_do_down",
        "new_do_frame": "IPython.core.debugger.Pdb.new_do_frame",
        "new_do_quit": "IPython.core.debugger.Pdb.new_do_quit",
        "new_do_restart": "IPython.core.debugger.Pdb.new_do_restart",
        "new_do_up": "IPython.core.debugger.Pdb.new_do_up",
        "nohelp": "*** No help on %s",
        "print_list_lines": "IPython.core.debugger.Pdb.print_list_lines",
        "print_stack_entry": "IPython.core.debugger.Pdb.print_stack_entry",
        "print_stack_trace": "IPython.core.debugger.Pdb.print_stack_trace",
        "prompt": "(Cmd) ",
        "ruler": "=",
        "set_colors": "IPython.core.debugger.Pdb.set_colors",
        "undoc_header": "Undocumented commands:",
        "use_rawinput": "1"
      }
    },
    "IPython.core.interactiveshell.InteractiveShell": {
      "items": {
        "active_eventloop": "None",
        "all_ns_refs": "<property object at 0x102682f90>",
        "ask_yes_no": "IPython.core.interactiveshell.InteractiveShell.ask_yes_no",
        "atexit_operations": "IPython.core.interactiveshell.InteractiveShell.atexit_operations",
        "auto_rewrite_input": "IPython.core.interactiveshell.InteractiveShell.auto_rewrite_input",
        "banner": "<property object at 0x102682e50>",
        "call_pdb": "<property object at 0x102682ef0>",
        "check_complete": "IPython.core.interactiveshell.InteractiveShell.check_complete",
        "cleanup": "IPython.core.interactiveshell.InteractiveShell.cleanup",
        "clear_main_mod_cache": "IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache",
        "complete": "IPython.core.interactiveshell.InteractiveShell.complete",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "data_pub_class": "None",
        "debugger": "IPython.core.interactiveshell.InteractiveShell.debugger",
        "debugger_cls": "IPython.core.debugger.Pdb",
        "default_user_namespaces": "True",
        "define_macro": "IPython.core.interactiveshell.InteractiveShell.define_macro",
        "del_var": "IPython.core.interactiveshell.InteractiveShell.del_var",
        "drop_by_id": "IPython.core.interactiveshell.InteractiveShell.drop_by_id",
        "enable_gui": "IPython.core.interactiveshell.InteractiveShell.enable_gui",
        "enable_matplotlib": "IPython.core.interactiveshell.InteractiveShell.enable_matplotlib",
        "enable_pylab": "IPython.core.interactiveshell.InteractiveShell.enable_pylab",
        "ev": "IPython.core.interactiveshell.InteractiveShell.ev",
        "ex": "IPython.core.interactiveshell.InteractiveShell.ex",
        "excepthook": "IPython.core.interactiveshell.InteractiveShell.excepthook",
        "extract_input_lines": "IPython.core.interactiveshell.InteractiveShell.extract_input_lines",
        "find_cell_magic": "IPython.core.interactiveshell.InteractiveShell.find_cell_magic",
        "find_line_magic": "IPython.core.interactiveshell.InteractiveShell.find_line_magic",
        "find_magic": "IPython.core.interactiveshell.InteractiveShell.find_magic",
        "find_user_code": "IPython.core.interactiveshell.InteractiveShell.find_user_code",
        "get_exception_only": "IPython.core.interactiveshell.InteractiveShell.get_exception_only",
        "get_ipython": "IPython.core.interactiveshell.InteractiveShell.get_ipython",
        "getoutput": "IPython.core.interactiveshell.InteractiveShell.getoutput",
        "init_alias": "IPython.core.interactiveshell.InteractiveShell.init_alias",
        "init_builtins": "IPython.core.interactiveshell.InteractiveShell.init_builtins",
        "init_completer": "IPython.core.interactiveshell.InteractiveShell.init_completer",
        "init_create_namespaces": "IPython.core.interactiveshell.InteractiveShell.init_create_namespaces",
        "init_data_pub": "IPython.core.interactiveshell.InteractiveShell.init_data_pub",
        "init_deprecation_warnings": "IPython.core.interactiveshell.InteractiveShell.init_deprecation_warnings",
        "init_display_formatter": "IPython.core.interactiveshell.InteractiveShell.init_display_formatter",
        "init_display_pub": "IPython.core.interactiveshell.InteractiveShell.init_display_pub",
        "init_displayhook": "IPython.core.interactiveshell.InteractiveShell.init_displayhook",
        "init_encoding": "IPython.core.interactiveshell.InteractiveShell.init_encoding",
        "init_environment": "IPython.core.interactiveshell.InteractiveShell.init_environment",
        "init_events": "IPython.core.interactiveshell.InteractiveShell.init_events",
        "init_extension_manager": "IPython.core.interactiveshell.InteractiveShell.init_extension_manager",
        "init_history": "IPython.core.interactiveshell.InteractiveShell.init_history",
        "init_hooks": "IPython.core.interactiveshell.InteractiveShell.init_hooks",
        "init_instance_attrs": "IPython.core.interactiveshell.InteractiveShell.init_instance_attrs",
        "init_io": "IPython.core.interactiveshell.InteractiveShell.init_io",
        "init_ipython_dir": "IPython.core.interactiveshell.InteractiveShell.init_ipython_dir",
        "init_logger": "IPython.core.interactiveshell.InteractiveShell.init_logger",
        "init_logstart": "IPython.core.interactiveshell.InteractiveShell.init_logstart",
        "init_magics": "IPython.core.interactiveshell.InteractiveShell.init_magics",
        "init_payload": "IPython.core.interactiveshell.InteractiveShell.init_payload",
        "init_pdb": "IPython.core.interactiveshell.InteractiveShell.init_pdb",
        "init_prefilter": "IPython.core.interactiveshell.InteractiveShell.init_prefilter",
        "init_profile_dir": "IPython.core.interactiveshell.InteractiveShell.init_profile_dir",
        "init_prompts": "IPython.core.interactiveshell.InteractiveShell.init_prompts",
        "init_pushd_popd_magic": "IPython.core.interactiveshell.InteractiveShell.init_pushd_popd_magic",
        "init_readline": "IPython.core.interactiveshell.InteractiveShell.init_readline",
        "init_sys_modules": "IPython.core.interactiveshell.InteractiveShell.init_sys_modules",
        "init_traceback_handlers": "IPython.core.interactiveshell.InteractiveShell.init_traceback_handlers",
        "init_user_ns": "IPython.core.interactiveshell.InteractiveShell.init_user_ns",
        "init_virtualenv": "IPython.core.interactiveshell.InteractiveShell.init_virtualenv",
        "input_splitter": "<property object at 0x102682c70>",
        "input_transformers_cleanup": "<property object at 0x102682c20>",
        "loop_runner_map": "{'asyncio': (<IPython.core.async_helpers._AsyncIORunner object at 0x1026815b0>, True), 'curio': (<function _curio_runner at 0x102683280>, True), 'trio': (<function _trio_runner at 0x102683550>, True), 'sync': (<function _pseudo_sync_runner at 0x1026835e0>, False)}",
        "magic": "IPython.core.interactiveshell.InteractiveShell.magic",
        "mktempfile": "IPython.core.interactiveshell.InteractiveShell.mktempfile",
        "new_main_mod": "IPython.core.interactiveshell.InteractiveShell.new_main_mod",
        "object_inspect": "IPython.core.interactiveshell.InteractiveShell.object_inspect",
        "object_inspect_mime": "IPython.core.interactiveshell.InteractiveShell.object_inspect_mime",
        "object_inspect_text": "IPython.core.interactiveshell.InteractiveShell.object_inspect_text",
        "prepare_user_module": "IPython.core.interactiveshell.InteractiveShell.prepare_user_module",
        "profile": "<property object at 0x102682db0>",
        "push": "IPython.core.interactiveshell.InteractiveShell.push",
        "pylab_gui_select": "None",
        "refresh_style": "IPython.core.interactiveshell.InteractiveShell.refresh_style",
        "register_magic_function": "IPython.core.magic.MagicsManager.register_function",
        "register_post_execute": "IPython.core.interactiveshell.InteractiveShell.register_post_execute",
        "reset": "IPython.core.interactiveshell.InteractiveShell.reset",
        "reset_selective": "IPython.core.interactiveshell.InteractiveShell.reset_selective",
        "restore_sys_module_state": "IPython.core.interactiveshell.InteractiveShell.restore_sys_module_state",
        "run_ast_nodes": "IPython.core.interactiveshell.InteractiveShell.run_ast_nodes",
        "run_cell": "IPython.core.interactiveshell.InteractiveShell.run_cell",
        "run_cell_async": "IPython.core.interactiveshell.InteractiveShell.run_cell_async",
        "run_cell_magic": "IPython.core.interactiveshell.InteractiveShell.run_cell_magic",
        "run_code": "IPython.core.interactiveshell.InteractiveShell.run_code",
        "run_line_magic": "IPython.core.interactiveshell.InteractiveShell.run_line_magic",
        "runcode": "IPython.core.interactiveshell.InteractiveShell.run_code",
        "safe_execfile": "IPython.core.interactiveshell.InteractiveShell.safe_execfile",
        "safe_execfile_ipy": "IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy",
        "safe_run_module": "IPython.core.interactiveshell.InteractiveShell.safe_run_module",
        "save_sys_module_state": "IPython.core.interactiveshell.InteractiveShell.save_sys_module_state",
        "separate_in": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b580>",
        "separate_out": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b5e0>",
        "separate_out2": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b640>",
        "set_autoindent": "IPython.core.interactiveshell.InteractiveShell.set_autoindent",
        "set_completer_frame": "IPython.core.interactiveshell.InteractiveShell.set_completer_frame",
        "set_custom_completer": "IPython.core.interactiveshell.InteractiveShell.set_custom_completer",
        "set_custom_exc": "IPython.core.interactiveshell.InteractiveShell.set_custom_exc",
        "set_hook": "IPython.core.interactiveshell.InteractiveShell.set_hook",
        "set_next_input": "IPython.core.interactiveshell.InteractiveShell.set_next_input",
        "set_trio_runner": "IPython.core.interactiveshell.InteractiveShell.set_trio_runner",
        "should_run_async": "IPython.core.interactiveshell.InteractiveShell.should_run_async",
        "show_banner": "IPython.core.interactiveshell.InteractiveShell.show_banner",
        "show_usage": "IPython.core.interactiveshell.InteractiveShell.show_usage",
        "show_usage_error": "IPython.core.interactiveshell.InteractiveShell.show_usage_error",
        "showindentationerror": "IPython.core.interactiveshell.InteractiveShell.showindentationerror",
        "showsyntaxerror": "IPython.core.interactiveshell.InteractiveShell.showsyntaxerror",
        "showtraceback": "IPython.core.interactiveshell.InteractiveShell.showtraceback",
        "switch_doctest_mode": "IPython.core.interactiveshell.InteractiveShell.switch_doctest_mode",
        "system": "IPython.core.interactiveshell.InteractiveShell.system_piped",
        "system_piped": "IPython.core.interactiveshell.InteractiveShell.system_piped",
        "system_raw": "IPython.core.interactiveshell.InteractiveShell.system_raw",
        "transform_ast": "IPython.core.interactiveshell.InteractiveShell.transform_ast",
        "transform_cell": "IPython.core.interactiveshell.InteractiveShell.transform_cell",
        "user_expressions": "IPython.core.interactiveshell.InteractiveShell.user_expressions",
        "user_global_ns": "<property object at 0x102682f40>",
        "var_expand": "IPython.core.interactiveshell.InteractiveShell.var_expand",
        "write": "IPython.core.interactiveshell.InteractiveShell.write",
        "write_err": "IPython.core.interactiveshell.InteractiveShell.write_err"
      }
    },
    "IPython.core.alias.Alias": {
      "items": {
        "blacklist": "{'popd', 'unalias', 'cd', 'alias', 'pushd', 'dhist'}",
        "validate": "IPython.core.alias.Alias.validate"
      }
    },
    "IPython.core.alias.AliasError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.alias.AliasManager": {
      "items": {
        "aliases": "<property object at 0x1024465e0>",
        "clear_aliases": "IPython.core.alias.AliasManager.clear_aliases",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "define_alias": "IPython.core.alias.AliasManager.define_alias",
        "get_alias": "IPython.core.alias.AliasManager.get_alias",
        "init_aliases": "IPython.core.alias.AliasManager.init_aliases",
        "is_alias": "IPython.core.alias.AliasManager.is_alias",
        "retrieve_alias": "IPython.core.alias.AliasManager.retrieve_alias",
        "soft_define_alias": "IPython.core.alias.AliasManager.soft_define_alias",
        "undefine_alias": "IPython.core.alias.AliasManager.undefine_alias"
      }
    },
    "IPython.core.alias.InvalidAliasError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.error.UsageError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.application.ProfileAwareConfigLoader": {
      "items": {
        "load_subconfig": "IPython.core.application.ProfileAwareConfigLoader.load_subconfig"
      }
    },
    "IPython.core.application.BaseIPythonApplication": {
      "items": {
        "aliases": "{'profile-dir': 'ProfileDir.location', 'profile': 'BaseIPythonApplication.profile', 'ipython-dir': 'BaseIPythonApplication.ipython_dir', 'log-level': 'Application.log_level', 'config': 'BaseIPythonApplication.extra_config_file'}",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "deprecated_subcommands": "{}",
        "excepthook": "IPython.core.application.BaseIPythonApplication.excepthook",
        "flags": "{'debug': ({'Application': {'log_level': 10}}, 'set log level to logging.DEBUG (maximize logging output)'), 'quiet': ({'Application': {'log_level': 50}}, 'set log level to logging.CRITICAL (minimize logging output)'), 'init': ({'BaseIPythonApplication': {'copy_config_files': True, 'auto_create': True}}, 'Initialize profile with default config files.  This is equivalent\\n            to running `ipython profile create <profile>` prior to startup.\\n            ')}",
        "init_config_files": "IPython.core.application.BaseIPythonApplication.init_config_files",
        "init_crash_handler": "IPython.core.application.BaseIPythonApplication.init_crash_handler",
        "init_profile_dir": "IPython.core.application.BaseIPythonApplication.init_profile_dir",
        "initialize": "IPython.core.application.BaseIPythonApplication.initialize",
        "initialize_subcommand": "IPython.core.application.BaseIPythonApplication.initialize_subcommand",
        "load_config_file": "IPython.core.application.BaseIPythonApplication.load_config_file",
        "loaded_config_files": "<property object at 0x101cd1d60>",
        "name": "ipython",
        "python_config_loader_class": "IPython.core.application.ProfileAwareConfigLoader",
        "stage_default_config_file": "IPython.core.application.BaseIPythonApplication.stage_default_config_file"
      }
    },
    "IPython.core.profiledir.ProfileDir": {
      "items": {
        "check_dirs": "IPython.core.profiledir.ProfileDir.check_dirs",
        "copy_config_file": "IPython.core.profiledir.ProfileDir.copy_config_file",
        "create_profile_dir": "IPython.core.profiledir.ProfileDir.create_profile_dir",
        "create_profile_dir_by_name": "IPython.core.profiledir.ProfileDir.create_profile_dir_by_name",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "find_profile_dir": "IPython.core.profiledir.ProfileDir.find_profile_dir",
        "find_profile_dir_by_name": "IPython.core.profiledir.ProfileDir.find_profile_dir_by_name"
      }
    },
    "IPython.core.profiledir.ProfileDirError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.crashhandler.CrashHandler": {
      "items": {
        "make_report": "IPython.core.crashhandler.CrashHandler.make_report",
        "message_template": "Oops, {app_name} crashed. We do our best to make it stable, but...\n\nA crash report was automatically generated with the following information:\n  - A verbatim copy of the crash traceback.\n  - A copy of your input history during this session.\n  - Data on your current {app_name} configuration.\n\nIt was left in the file named:\n\t'{crash_report_fname}'\nIf you can email this file to the developers, the information in it will help\nthem in understanding and correcting the problem.\n\nYou can mail it to: {contact_name} at {contact_email}\nwith the subject '{app_name} Crash Report'.\n\nIf you want to do it now, the following command will work (under Unix):\nmail -s '{app_name} Crash Report' {contact_email} < {crash_report_fname}\n\nIn your email, please also include information about:\n- The operating system under which the crash happened: Linux, macOS, Windows,\n  other, and which exact version (for example: Ubuntu 16.04.3, macOS 10.13.2,\n  Windows 10 Pro), and whether it is 32-bit or 64-bit;\n- How {app_name} was installed: using pip or conda, from GitHub, as part of\n  a Docker container, or other, providing more detail if possible;\n- How to reproduce the crash: what exact sequence of instructions can one\n  input to get the same crash? Ideally, find a minimal yet complete sequence\n  of instructions that yields the crash.\n\nTo ensure accurate tracking of this issue, please file a report about it at:\n{bug_tracker}\n",
        "section_sep": "\n\n***************************************************************************\n\n"
      }
    },
    "IPython.core.ultratb.AutoFormattedTB": {
      "items": {
        "color_toggle": "IPython.core.ultratb.TBTools.color_toggle",
        "context": "IPython.core.ultratb.FormattedTB.context",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "debugger": "IPython.core.ultratb.VerboseTB.debugger",
        "format_exception": "IPython.core.ultratb.VerboseTB.format_exception",
        "format_exception_as_a_whole": "IPython.core.ultratb.VerboseTB.format_exception_as_a_whole",
        "format_record": "IPython.core.ultratb.VerboseTB.format_record",
        "get_exception_only": "IPython.core.ultratb.ListTB.get_exception_only",
        "get_parts_of_chained_exception": "IPython.core.ultratb.TBTools.get_parts_of_chained_exception",
        "get_records": "IPython.core.ultratb.VerboseTB.get_records",
        "handler": "IPython.core.ultratb.VerboseTB.handler",
        "has_colors": "<property object at 0x101f384a0>",
        "minimal": "IPython.core.ultratb.FormattedTB.minimal",
        "ostream": "<property object at 0x101ed7bd0>",
        "plain": "IPython.core.ultratb.FormattedTB.plain",
        "prepare_chained_exception_message": "IPython.core.ultratb.TBTools.prepare_chained_exception_message",
        "prepare_header": "IPython.core.ultratb.VerboseTB.prepare_header",
        "set_colors": "IPython.core.ultratb.TBTools.set_colors",
        "set_mode": "IPython.core.ultratb.FormattedTB.set_mode",
        "show_exception_only": "IPython.core.ultratb.ListTB.show_exception_only",
        "stb2text": "IPython.core.ultratb.FormattedTB.stb2text",
        "structured_traceback": "IPython.core.ultratb.AutoFormattedTB.structured_traceback",
        "tb_offset": "0",
        "text": "IPython.core.ultratb.TBTools.text",
        "verbose": "IPython.core.ultratb.FormattedTB.verbose"
      }
    },
    "IPython.core.ultratb.ColorTB": {
      "items": {
        "color_toggle": "IPython.core.ultratb.TBTools.color_toggle",
        "context": "IPython.core.ultratb.FormattedTB.context",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "debugger": "IPython.core.ultratb.VerboseTB.debugger",
        "format_exception": "IPython.core.ultratb.VerboseTB.format_exception",
        "format_exception_as_a_whole": "IPython.core.ultratb.VerboseTB.format_exception_as_a_whole",
        "format_record": "IPython.core.ultratb.VerboseTB.format_record",
        "get_exception_only": "IPython.core.ultratb.ListTB.get_exception_only",
        "get_parts_of_chained_exception": "IPython.core.ultratb.TBTools.get_parts_of_chained_exception",
        "get_records": "IPython.core.ultratb.VerboseTB.get_records",
        "handler": "IPython.core.ultratb.VerboseTB.handler",
        "has_colors": "<property object at 0x101f384a0>",
        "minimal": "IPython.core.ultratb.FormattedTB.minimal",
        "ostream": "<property object at 0x101ed7bd0>",
        "plain": "IPython.core.ultratb.FormattedTB.plain",
        "prepare_chained_exception_message": "IPython.core.ultratb.TBTools.prepare_chained_exception_message",
        "prepare_header": "IPython.core.ultratb.VerboseTB.prepare_header",
        "set_colors": "IPython.core.ultratb.TBTools.set_colors",
        "set_mode": "IPython.core.ultratb.FormattedTB.set_mode",
        "show_exception_only": "IPython.core.ultratb.ListTB.show_exception_only",
        "stb2text": "IPython.core.ultratb.FormattedTB.stb2text",
        "structured_traceback": "IPython.core.ultratb.FormattedTB.structured_traceback",
        "tb_offset": "0",
        "text": "IPython.core.ultratb.TBTools.text",
        "verbose": "IPython.core.ultratb.FormattedTB.verbose"
      }
    },
    "IPython.core.display_trap.DisplayTrap": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "set": "IPython.core.display_trap.DisplayTrap.set",
        "unset": "IPython.core.display_trap.DisplayTrap.unset"
      }
    },
    "IPython.core.ultratb.FormattedTB": {
      "items": {
        "color_toggle": "IPython.core.ultratb.TBTools.color_toggle",
        "context": "IPython.core.ultratb.FormattedTB.context",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "debugger": "IPython.core.ultratb.VerboseTB.debugger",
        "format_exception": "IPython.core.ultratb.VerboseTB.format_exception",
        "format_exception_as_a_whole": "IPython.core.ultratb.VerboseTB.format_exception_as_a_whole",
        "format_record": "IPython.core.ultratb.VerboseTB.format_record",
        "get_exception_only": "IPython.core.ultratb.ListTB.get_exception_only",
        "get_parts_of_chained_exception": "IPython.core.ultratb.TBTools.get_parts_of_chained_exception",
        "get_records": "IPython.core.ultratb.VerboseTB.get_records",
        "handler": "IPython.core.ultratb.VerboseTB.handler",
        "has_colors": "<property object at 0x101f384a0>",
        "minimal": "IPython.core.ultratb.FormattedTB.minimal",
        "ostream": "<property object at 0x101ed7bd0>",
        "plain": "IPython.core.ultratb.FormattedTB.plain",
        "prepare_chained_exception_message": "IPython.core.ultratb.TBTools.prepare_chained_exception_message",
        "prepare_header": "IPython.core.ultratb.VerboseTB.prepare_header",
        "set_colors": "IPython.core.ultratb.TBTools.set_colors",
        "set_mode": "IPython.core.ultratb.FormattedTB.set_mode",
        "show_exception_only": "IPython.core.ultratb.ListTB.show_exception_only",
        "stb2text": "IPython.core.ultratb.FormattedTB.stb2text",
        "structured_traceback": "IPython.core.ultratb.FormattedTB.structured_traceback",
        "tb_offset": "0",
        "text": "IPython.core.ultratb.TBTools.text",
        "verbose": "IPython.core.ultratb.FormattedTB.verbose"
      }
    },
    "IPython.core.ultratb.ListTB": {
      "items": {
        "color_toggle": "IPython.core.ultratb.TBTools.color_toggle",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "get_exception_only": "IPython.core.ultratb.ListTB.get_exception_only",
        "get_parts_of_chained_exception": "IPython.core.ultratb.TBTools.get_parts_of_chained_exception",
        "has_colors": "<property object at 0x101f384a0>",
        "ostream": "<property object at 0x101ed7bd0>",
        "prepare_chained_exception_message": "IPython.core.ultratb.TBTools.prepare_chained_exception_message",
        "set_colors": "IPython.core.ultratb.TBTools.set_colors",
        "show_exception_only": "IPython.core.ultratb.ListTB.show_exception_only",
        "stb2text": "IPython.core.ultratb.TBTools.stb2text",
        "structured_traceback": "IPython.core.ultratb.ListTB.structured_traceback",
        "tb_offset": "0",
        "text": "IPython.core.ultratb.TBTools.text"
      }
    },
    "IPython.core.ultratb.SyntaxTB": {
      "items": {
        "clear_err_state": "IPython.core.ultratb.SyntaxTB.clear_err_state",
        "color_toggle": "IPython.core.ultratb.TBTools.color_toggle",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "get_exception_only": "IPython.core.ultratb.ListTB.get_exception_only",
        "get_parts_of_chained_exception": "IPython.core.ultratb.TBTools.get_parts_of_chained_exception",
        "has_colors": "<property object at 0x101f384a0>",
        "ostream": "<property object at 0x101ed7bd0>",
        "prepare_chained_exception_message": "IPython.core.ultratb.TBTools.prepare_chained_exception_message",
        "set_colors": "IPython.core.ultratb.TBTools.set_colors",
        "show_exception_only": "IPython.core.ultratb.ListTB.show_exception_only",
        "stb2text": "IPython.core.ultratb.SyntaxTB.stb2text",
        "structured_traceback": "IPython.core.ultratb.SyntaxTB.structured_traceback",
        "tb_offset": "0",
        "text": "IPython.core.ultratb.TBTools.text"
      }
    },
    "IPython.core.ultratb.TBTools": {
      "items": {
        "color_toggle": "IPython.core.ultratb.TBTools.color_toggle",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "get_parts_of_chained_exception": "IPython.core.ultratb.TBTools.get_parts_of_chained_exception",
        "has_colors": "<property object at 0x101f384a0>",
        "ostream": "<property object at 0x101ed7bd0>",
        "prepare_chained_exception_message": "IPython.core.ultratb.TBTools.prepare_chained_exception_message",
        "set_colors": "IPython.core.ultratb.TBTools.set_colors",
        "stb2text": "IPython.core.ultratb.TBTools.stb2text",
        "structured_traceback": "IPython.core.ultratb.TBTools.structured_traceback",
        "tb_offset": "0",
        "text": "IPython.core.ultratb.TBTools.text"
      }
    },
    "IPython.core.ultratb.VerboseTB": {
      "items": {
        "color_toggle": "IPython.core.ultratb.TBTools.color_toggle",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "debugger": "IPython.core.ultratb.VerboseTB.debugger",
        "format_exception": "IPython.core.ultratb.VerboseTB.format_exception",
        "format_exception_as_a_whole": "IPython.core.ultratb.VerboseTB.format_exception_as_a_whole",
        "format_record": "IPython.core.ultratb.VerboseTB.format_record",
        "get_parts_of_chained_exception": "IPython.core.ultratb.TBTools.get_parts_of_chained_exception",
        "get_records": "IPython.core.ultratb.VerboseTB.get_records",
        "handler": "IPython.core.ultratb.VerboseTB.handler",
        "has_colors": "<property object at 0x101f384a0>",
        "ostream": "<property object at 0x101ed7bd0>",
        "prepare_chained_exception_message": "IPython.core.ultratb.TBTools.prepare_chained_exception_message",
        "prepare_header": "IPython.core.ultratb.VerboseTB.prepare_header",
        "set_colors": "IPython.core.ultratb.TBTools.set_colors",
        "stb2text": "IPython.core.ultratb.TBTools.stb2text",
        "structured_traceback": "IPython.core.ultratb.VerboseTB.structured_traceback",
        "tb_offset": "0",
        "text": "IPython.core.ultratb.TBTools.text"
      }
    },
    "IPython.utils.colorable.Colorable": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.core.debugger.InterruptiblePdb": {
      "items": {
        "cmdloop": "IPython.core.debugger.InterruptiblePdb.cmdloop",
        "commands_resuming": "['do_continue', 'do_step', 'do_next', 'do_return', 'do_quit', 'do_jump']",
        "do_d": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_debug": "IPython.core.debugger.Pdb.do_debug",
        "do_down": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_l": "IPython.core.debugger.Pdb.do_list",
        "do_list": "IPython.core.debugger.Pdb.do_list",
        "do_ll": "IPython.core.debugger.Pdb.do_longlist",
        "do_longlist": "IPython.core.debugger.Pdb.do_longlist",
        "do_pdef": "IPython.core.debugger.Pdb.do_pdef",
        "do_pdoc": "IPython.core.debugger.Pdb.do_pdoc",
        "do_pfile": "IPython.core.debugger.Pdb.do_pfile",
        "do_pinfo": "IPython.core.debugger.Pdb.do_pinfo",
        "do_pinfo2": "IPython.core.debugger.Pdb.do_pinfo2",
        "do_psource": "IPython.core.debugger.Pdb.do_psource",
        "do_q": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_quit": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_u": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_up": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_w": "IPython.core.debugger.Pdb.do_where",
        "do_where": "IPython.core.debugger.Pdb.do_where",
        "doc_header": "Documented commands (type help <topic>):",
        "format_stack_entry": "IPython.core.debugger.Pdb.format_stack_entry",
        "getsourcelines": "IPython.core.debugger.Pdb.getsourcelines",
        "identchars": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_",
        "interaction": "IPython.core.debugger.Pdb.interaction",
        "intro": "None",
        "misc_header": "Miscellaneous help topics:",
        "new_do_down": "IPython.core.debugger.Pdb.new_do_down",
        "new_do_frame": "IPython.core.debugger.Pdb.new_do_frame",
        "new_do_quit": "IPython.core.debugger.Pdb.new_do_quit",
        "new_do_restart": "IPython.core.debugger.Pdb.new_do_restart",
        "new_do_up": "IPython.core.debugger.Pdb.new_do_up",
        "nohelp": "*** No help on %s",
        "print_list_lines": "IPython.core.debugger.Pdb.print_list_lines",
        "print_stack_entry": "IPython.core.debugger.Pdb.print_stack_entry",
        "print_stack_trace": "IPython.core.debugger.Pdb.print_stack_trace",
        "prompt": "(Cmd) ",
        "ruler": "=",
        "set_colors": "IPython.core.debugger.Pdb.set_colors",
        "undoc_header": "Undocumented commands:",
        "use_rawinput": "1"
      }
    },
    "IPython.utils.coloransi.ColorScheme": {
      "items": {
        "copy": "IPython.utils.coloransi.ColorScheme.copy"
      }
    },
    "IPython.utils.coloransi.ColorSchemeTable": {
      "items": {
        "add_scheme": "IPython.utils.coloransi.ColorSchemeTable.add_scheme",
        "copy": "IPython.utils.coloransi.ColorSchemeTable.copy",
        "fromkeys": "BUILTIN.ColorSchemeTable.fromkeys",
        "set_active_scheme": "IPython.utils.coloransi.ColorSchemeTable.set_active_scheme"
      }
    },
    "IPython.utils.coloransi.TermColors": {
      "items": {
        "Black": "\u001b[0;30m",
        "BlinkBlack": "\u001b[5;30m",
        "BlinkBlue": "\u001b[5;34m",
        "BlinkCyan": "\u001b[5;36m",
        "BlinkGreen": "\u001b[5;32m",
        "BlinkLightGray": "\u001b[5;37m",
        "BlinkPurple": "\u001b[5;35m",
        "BlinkRed": "\u001b[5;31m",
        "BlinkYellow": "\u001b[5;33m",
        "Blue": "\u001b[0;34m",
        "Brown": "\u001b[0;33m",
        "Cyan": "\u001b[0;36m",
        "DarkGray": "\u001b[1;30m",
        "Green": "\u001b[0;32m",
        "LightBlue": "\u001b[1;34m",
        "LightCyan": "\u001b[1;36m",
        "LightGray": "\u001b[0;37m",
        "LightGreen": "\u001b[1;32m",
        "LightPurple": "\u001b[1;35m",
        "LightRed": "\u001b[1;31m",
        "Normal": "\u001b[0m",
        "Purple": "\u001b[0;35m",
        "Red": "\u001b[0;31m",
        "White": "\u001b[1;37m",
        "Yellow": "\u001b[1;33m"
      }
    },
    "IPython.utils.coloransi.InputTermColors": {
      "items": {
        "Black": "\u0001\u001b[0;30m\u0002",
        "BlinkBlack": "\u0001\u001b[5;30m\u0002",
        "BlinkBlue": "\u0001\u001b[5;34m\u0002",
        "BlinkCyan": "\u0001\u001b[5;36m\u0002",
        "BlinkGreen": "\u0001\u001b[5;32m\u0002",
        "BlinkLightGray": "\u0001\u001b[5;37m\u0002",
        "BlinkPurple": "\u0001\u001b[5;35m\u0002",
        "BlinkRed": "\u0001\u001b[5;31m\u0002",
        "BlinkYellow": "\u0001\u001b[5;33m\u0002",
        "Blue": "\u0001\u001b[0;34m\u0002",
        "Brown": "\u0001\u001b[0;33m\u0002",
        "Cyan": "\u0001\u001b[0;36m\u0002",
        "DarkGray": "\u0001\u001b[1;30m\u0002",
        "Green": "\u0001\u001b[0;32m\u0002",
        "LightBlue": "\u0001\u001b[1;34m\u0002",
        "LightCyan": "\u0001\u001b[1;36m\u0002",
        "LightGray": "\u0001\u001b[0;37m\u0002",
        "LightGreen": "\u0001\u001b[1;32m\u0002",
        "LightPurple": "\u0001\u001b[1;35m\u0002",
        "LightRed": "\u0001\u001b[1;31m\u0002",
        "Normal": "\u0001\u001b[0m\u0002",
        "Purple": "\u0001\u001b[0;35m\u0002",
        "Red": "\u0001\u001b[0;31m\u0002",
        "White": "\u0001\u001b[1;37m\u0002",
        "Yellow": "\u0001\u001b[1;33m\u0002"
      }
    },
    "IPython.utils.PyColorize.Parser": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "format": "IPython.utils.PyColorize.Parser.format",
        "format2": "IPython.utils.PyColorize.Parser.format2"
      }
    },
    "IPython.core.debugger.Tracer": {
      "items": {}
    },
    "IPython.utils.coloransi.NoColors": {
      "items": {}
    },
    "IPython.utils.ipstruct.Struct": {
      "items": {
        "allow_new_attr": "IPython.utils.ipstruct.Struct.allow_new_attr",
        "copy": "IPython.utils.ipstruct.Struct.copy",
        "dict": "IPython.utils.ipstruct.Struct.dict",
        "fromkeys": "BUILTIN.Struct.fromkeys",
        "hasattr": "IPython.utils.ipstruct.Struct.hasattr",
        "merge": "IPython.utils.ipstruct.Struct.merge"
      }
    },
    "IPython.utils.path.HomeDirError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.autocall.ExitAutocall": {
      "items": {
        "rewrite": "False",
        "set_ip": "IPython.core.autocall.IPyAutocall.set_ip"
      }
    },
    "IPython.core.autocall.IPyAutocall": {
      "items": {
        "rewrite": "True",
        "set_ip": "IPython.core.autocall.IPyAutocall.set_ip"
      }
    },
    "IPython.core.autocall.ZMQExitAutocall": {
      "items": {
        "rewrite": "False",
        "set_ip": "IPython.core.autocall.IPyAutocall.set_ip"
      }
    },
    "IPython.core.builtin_trap.BuiltinTrap": {
      "items": {
        "activate": "IPython.core.builtin_trap.BuiltinTrap.activate",
        "add_builtin": "IPython.core.builtin_trap.BuiltinTrap.add_builtin",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "deactivate": "IPython.core.builtin_trap.BuiltinTrap.deactivate",
        "remove_builtin": "IPython.core.builtin_trap.BuiltinTrap.remove_builtin"
      }
    },
    "IPython.core.compilerop.CachingCompiler": {
      "items": {
        "ast_parse": "IPython.core.compilerop.CachingCompiler.ast_parse",
        "cache": "IPython.core.compilerop.CachingCompiler.cache",
        "compiler_flags": "<property object at 0x101feaea0>",
        "extra_flags": "IPython.core.compilerop.CachingCompiler.extra_flags",
        "reset_compiler_flags": "IPython.core.compilerop.CachingCompiler.reset_compiler_flags"
      }
    },
    "IPython.core.completer.Completer": {
      "items": {
        "attr_matches": "IPython.core.completer.Completer.attr_matches",
        "complete": "IPython.core.completer.Completer.complete",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "global_matches": "IPython.core.completer.Completer.global_matches"
      }
    },
    "IPython.core.completer.Completion": {
      "items": {
        "end": "<member 'end' of 'Completion' objects>",
        "signature": "<member 'signature' of 'Completion' objects>",
        "start": "<member 'start' of 'Completion' objects>",
        "text": "<member 'text' of 'Completion' objects>",
        "type": "<member 'type' of 'Completion' objects>"
      }
    },
    "IPython.core.completer.CompletionSplitter": {
      "items": {
        "delims": "<property object at 0x103213d60>",
        "split_line": "IPython.core.completer.CompletionSplitter.split_line"
      }
    },
    "IPython.core.completer.IPCompleter": {
      "items": {
        "all_completions": "IPython.core.completer.IPCompleter.all_completions",
        "attr_matches": "IPython.core.completer.Completer.attr_matches",
        "complete": "IPython.core.completer.IPCompleter.complete",
        "completions": "IPython.core.completer.IPCompleter.completions",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "dict_key_matches": "IPython.core.completer.IPCompleter.dict_key_matches",
        "dispatch_custom_completer": "IPython.core.completer.IPCompleter.dispatch_custom_completer",
        "file_matches": "IPython.core.completer.IPCompleter.file_matches",
        "fwd_unicode_match": "IPython.core.completer.IPCompleter.fwd_unicode_match",
        "global_matches": "IPython.core.completer.Completer.global_matches",
        "latex_matches": "IPython.core.completer.IPCompleter.latex_matches",
        "magic_color_matches": "IPython.core.completer.IPCompleter.magic_color_matches",
        "magic_config_matches": "IPython.core.completer.IPCompleter.magic_config_matches",
        "magic_matches": "IPython.core.completer.IPCompleter.magic_matches",
        "matchers": "<property object at 0x1032222c0>",
        "python_func_kw_matches": "IPython.core.completer.IPCompleter.python_func_kw_matches",
        "python_matches": "IPython.core.completer.IPCompleter.python_matches",
        "unicode_name_matches": "IPython.core.completer.IPCompleter.unicode_name_matches",
        "unicode_names": "<property object at 0x103222310>"
      }
    },
    "IPython.core.completer.ProvisionalCompleterWarning": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.error.TryNext": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.display.DisplayObject": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.GeoJSON": {
      "items": {
        "data": "<property object at 0x1022ec590>",
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.HTML": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.Image": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.Image.reload"
      }
    },
    "IPython.core.display.JSON": {
      "items": {
        "data": "<property object at 0x1022ec590>",
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.Javascript": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.Latex": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.Markdown": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.Math": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.Pretty": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.ProgressBar": {
      "items": {
        "display": "IPython.core.display.ProgressBar.display",
        "metadata": "None",
        "progress": "<property object at 0x1022ec4f0>",
        "reload": "IPython.core.display.DisplayObject.reload",
        "update": "IPython.core.display.ProgressBar.update"
      }
    },
    "IPython.core.display.SVG": {
      "items": {
        "data": "<property object at 0x1022ec450>",
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.TextDisplayObject": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.core.display.Video": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.Video.reload"
      }
    },
    "IPython.core.display_functions.DisplayHandle": {
      "items": {
        "display": "IPython.core.display_functions.DisplayHandle.display",
        "update": "IPython.core.display_functions.DisplayHandle.update"
      }
    },
    "IPython.core.displayhook.CapturingDisplayHook": {
      "items": {}
    },
    "IPython.core.displayhook.DisplayHook": {
      "items": {
        "check_for_underscore": "IPython.core.displayhook.DisplayHook.check_for_underscore",
        "compute_format_data": "IPython.core.displayhook.DisplayHook.compute_format_data",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "cull_cache": "IPython.core.displayhook.DisplayHook.cull_cache",
        "fill_exec_result": "IPython.core.displayhook.DisplayHook.fill_exec_result",
        "finish_displayhook": "IPython.core.displayhook.DisplayHook.finish_displayhook",
        "flush": "IPython.core.displayhook.DisplayHook.flush",
        "log_output": "IPython.core.displayhook.DisplayHook.log_output",
        "prompt_count": "<property object at 0x1024551d0>",
        "prompt_end_newline": "False",
        "quiet": "IPython.core.displayhook.DisplayHook.quiet",
        "start_displayhook": "IPython.core.displayhook.DisplayHook.start_displayhook",
        "update_user_ns": "IPython.core.displayhook.DisplayHook.update_user_ns",
        "write_format_data": "IPython.core.displayhook.DisplayHook.write_format_data",
        "write_output_prompt": "IPython.core.displayhook.DisplayHook.write_output_prompt"
      }
    },
    "IPython.core.displaypub.CapturingDisplayPublisher": {
      "items": {
        "clear_output": "IPython.core.displaypub.CapturingDisplayPublisher.clear_output",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "publish": "IPython.core.displaypub.CapturingDisplayPublisher.publish"
      }
    },
    "IPython.core.displaypub.DisplayPublisher": {
      "items": {
        "clear_output": "IPython.core.displaypub.DisplayPublisher.clear_output",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "publish": "IPython.core.displaypub.DisplayPublisher.publish"
      }
    },
    "IPython.core.error.IPythonCoreError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.error.InputRejected": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.error.StdinNotImplementedError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.events.EventManager": {
      "items": {
        "register": "IPython.core.events.EventManager.register",
        "trigger": "IPython.core.events.EventManager.trigger",
        "unregister": "IPython.core.events.EventManager.unregister"
      }
    },
    "IPython.core.extensions.ExtensionManager": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "install_extension": "IPython.core.extensions.ExtensionManager.install_extension",
        "ipython_extension_dir": "<property object at 0x10245d040>",
        "load_extension": "IPython.core.extensions.ExtensionManager.load_extension",
        "reload_extension": "IPython.core.extensions.ExtensionManager.reload_extension",
        "unload_extension": "IPython.core.extensions.ExtensionManager.unload_extension"
      }
    },
    "IPython.core.formatters.BaseFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.DisplayFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "format": "IPython.core.formatters.DisplayFormatter.format",
        "format_types": "<property object at 0x102487ef0>"
      }
    },
    "IPython.core.formatters.FormatterABC": {
      "items": {
        "enabled": "True",
        "format_type": "text/plain"
      }
    },
    "IPython.core.formatters.FormatterWarning": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.formatters.HTMLFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.IPythonDisplayFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.JPEGFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.JSONFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.JavascriptFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.LatexFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.MarkdownFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.MimeBundleFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.PDFFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.PNGFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.PlainTextFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.core.formatters.SVGFormatter": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "for_type": "IPython.core.formatters.BaseFormatter.for_type",
        "for_type_by_name": "IPython.core.formatters.BaseFormatter.for_type_by_name",
        "lookup": "IPython.core.formatters.BaseFormatter.lookup",
        "lookup_by_type": "IPython.core.formatters.BaseFormatter.lookup_by_type",
        "pop": "IPython.core.formatters.BaseFormatter.pop"
      }
    },
    "IPython.utils.sentinel.Sentinel": {
      "items": {}
    },
    "IPython.lib.pretty.Breakable": {
      "items": {
        "output": "IPython.lib.pretty.Breakable.output"
      }
    },
    "IPython.lib.pretty.CUnicodeIO": {
      "items": {
        "closed": "<attribute 'closed' of '_io.StringIO' objects>",
        "encoding": "<attribute 'encoding' of '_io._TextIOBase' objects>",
        "errors": "<attribute 'errors' of '_io._TextIOBase' objects>",
        "line_buffering": "<attribute 'line_buffering' of '_io.StringIO' objects>",
        "newlines": "<attribute 'newlines' of '_io.StringIO' objects>"
      }
    },
    "IPython.lib.pretty.CallExpression": {
      "items": {
        "factory": "IPython.lib.pretty.CallExpression.factory"
      }
    },
    "IPython.lib.pretty.Group": {
      "items": {
        "output": "IPython.lib.pretty.Printable.output"
      }
    },
    "IPython.lib.pretty.GroupQueue": {
      "items": {
        "deq": "IPython.lib.pretty.GroupQueue.deq",
        "enq": "IPython.lib.pretty.GroupQueue.enq",
        "remove": "IPython.lib.pretty.GroupQueue.remove"
      }
    },
    "IPython.lib.pretty.PrettyPrinter": {
      "items": {
        "begin_group": "IPython.lib.pretty.PrettyPrinter.begin_group",
        "break_": "IPython.lib.pretty.PrettyPrinter.break_",
        "breakable": "IPython.lib.pretty.PrettyPrinter.breakable",
        "end_group": "IPython.lib.pretty.PrettyPrinter.end_group",
        "flush": "IPython.lib.pretty.PrettyPrinter.flush",
        "group": "IPython.lib.pretty._PrettyPrinterBase.group",
        "indent": "IPython.lib.pretty._PrettyPrinterBase.indent",
        "text": "IPython.lib.pretty.PrettyPrinter.text"
      }
    },
    "IPython.lib.pretty.Printable": {
      "items": {
        "output": "IPython.lib.pretty.Printable.output"
      }
    },
    "IPython.lib.pretty.RawStringLiteral": {
      "items": {}
    },
    "IPython.lib.pretty.RawText": {
      "items": {}
    },
    "IPython.lib.pretty.RepresentationPrinter": {
      "items": {
        "begin_group": "IPython.lib.pretty.PrettyPrinter.begin_group",
        "break_": "IPython.lib.pretty.PrettyPrinter.break_",
        "breakable": "IPython.lib.pretty.PrettyPrinter.breakable",
        "end_group": "IPython.lib.pretty.PrettyPrinter.end_group",
        "flush": "IPython.lib.pretty.PrettyPrinter.flush",
        "group": "IPython.lib.pretty._PrettyPrinterBase.group",
        "indent": "IPython.lib.pretty._PrettyPrinterBase.indent",
        "pretty": "IPython.lib.pretty.RepresentationPrinter.pretty",
        "text": "IPython.lib.pretty.PrettyPrinter.text"
      }
    },
    "IPython.lib.pretty.Text": {
      "items": {
        "add": "IPython.lib.pretty.Text.add",
        "output": "IPython.lib.pretty.Text.output"
      }
    },
    "IPython.core.history.DummyDB": {
      "items": {
        "commit": "IPython.core.history.DummyDB.commit",
        "execute": "IPython.core.history.DummyDB.execute"
      }
    },
    "IPython.core.history.HistoryAccessor": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "get_last_session_id": "IPython.core.history.HistoryAccessor.get_last_session_id",
        "get_range": "IPython.core.history.HistoryAccessor.get_range",
        "get_range_by_str": "IPython.core.history.HistoryAccessor.get_range_by_str",
        "get_session_info": "IPython.core.history.HistoryAccessor.get_session_info",
        "get_tail": "IPython.core.history.HistoryAccessor.get_tail",
        "init_db": "IPython.core.history.HistoryAccessor.init_db",
        "search": "IPython.core.history.HistoryAccessor.search",
        "writeout_cache": "IPython.core.history.HistoryAccessor.writeout_cache"
      }
    },
    "IPython.core.history.HistoryAccessorBase": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "get_range": "IPython.core.history.HistoryAccessorBase.get_range",
        "get_range_by_str": "IPython.core.history.HistoryAccessorBase.get_range_by_str",
        "get_tail": "IPython.core.history.HistoryAccessorBase.get_tail",
        "search": "IPython.core.history.HistoryAccessorBase.search"
      }
    },
    "IPython.core.history.HistoryManager": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "end_session": "IPython.core.history.HistoryManager.end_session",
        "get_last_session_id": "IPython.core.history.HistoryAccessor.get_last_session_id",
        "get_range": "IPython.core.history.HistoryManager.get_range",
        "get_range_by_str": "IPython.core.history.HistoryAccessor.get_range_by_str",
        "get_session_info": "IPython.core.history.HistoryManager.get_session_info",
        "get_tail": "IPython.core.history.HistoryAccessor.get_tail",
        "init_db": "IPython.core.history.HistoryAccessor.init_db",
        "name_session": "IPython.core.history.HistoryManager.name_session",
        "new_session": "IPython.core.history.HistoryManager.new_session",
        "reset": "IPython.core.history.HistoryManager.reset",
        "search": "IPython.core.history.HistoryAccessor.search",
        "store_inputs": "IPython.core.history.HistoryManager.store_inputs",
        "store_output": "IPython.core.history.HistoryManager.store_output",
        "writeout_cache": "IPython.core.history.HistoryManager.writeout_cache"
      }
    },
    "IPython.core.history.HistorySavingThread": {
      "items": {
        "daemon": "True",
        "enabled": "True",
        "ident": "<property object at 0x1019efea0>",
        "name": "<property object at 0x1019eff40>",
        "native_id": "<property object at 0x1019eff90>",
        "run": "IPython.core.history.HistorySavingThread.run",
        "stop": "IPython.core.history.HistorySavingThread.stop",
        "stop_now": "False"
      }
    },
    "IPython.core.hooks.CommandChainDispatcher": {
      "items": {
        "add": "IPython.core.hooks.CommandChainDispatcher.add"
      }
    },
    "IPython.core.inputtransformer2.EscapedCommand": {
      "items": {
        "find": "IPython.core.inputtransformer2.EscapedCommand.find",
        "priority": "10",
        "sortby": "IPython.core.inputtransformer2.TokenTransformBase.sortby",
        "transform": "IPython.core.inputtransformer2.EscapedCommand.transform"
      }
    },
    "IPython.core.inputtransformer2.HelpEnd": {
      "items": {
        "find": "IPython.core.inputtransformer2.HelpEnd.find",
        "priority": "5",
        "sortby": "IPython.core.inputtransformer2.TokenTransformBase.sortby",
        "transform": "IPython.core.inputtransformer2.HelpEnd.transform"
      }
    },
    "IPython.core.inputtransformer2.MagicAssign": {
      "items": {
        "find": "IPython.core.inputtransformer2.MagicAssign.find",
        "priority": "10",
        "sortby": "IPython.core.inputtransformer2.TokenTransformBase.sortby",
        "transform": "IPython.core.inputtransformer2.MagicAssign.transform"
      }
    },
    "IPython.core.inputtransformer2.PromptStripper": {
      "items": {}
    },
    "IPython.core.inputtransformer2.SystemAssign": {
      "items": {
        "find": "IPython.core.inputtransformer2.SystemAssign.find",
        "priority": "10",
        "sortby": "IPython.core.inputtransformer2.TokenTransformBase.sortby",
        "transform": "IPython.core.inputtransformer2.SystemAssign.transform"
      }
    },
    "IPython.core.inputtransformer2.TokenTransformBase": {
      "items": {
        "find": "IPython.core.inputtransformer2.TokenTransformBase.find",
        "priority": "10",
        "sortby": "IPython.core.inputtransformer2.TokenTransformBase.sortby",
        "transform": "IPython.core.inputtransformer2.TokenTransformBase.transform"
      }
    },
    "IPython.core.inputtransformer2.TransformerManager": {
      "items": {
        "check_complete": "IPython.core.inputtransformer2.TransformerManager.check_complete",
        "do_one_token_transform": "IPython.core.inputtransformer2.TransformerManager.do_one_token_transform",
        "do_token_transforms": "IPython.core.inputtransformer2.TransformerManager.do_token_transforms",
        "transform_cell": "IPython.core.inputtransformer2.TransformerManager.transform_cell"
      }
    },
    "IPython.utils.text.DollarFormatter": {
      "items": {
        "parse": "IPython.utils.text.DollarFormatter.parse",
        "vformat": "IPython.utils.text.FullEvalFormatter.vformat"
      }
    },
    "IPython.core.interactiveshell.DummyMod": {
      "items": {}
    },
    "IPython.core.interactiveshell.ExecutionInfo": {
      "items": {
        "raw_cell": "None",
        "shell_futures": "True",
        "silent": "False",
        "store_history": "False"
      }
    },
    "IPython.core.interactiveshell.ExecutionResult": {
      "items": {
        "error_before_exec": "None",
        "error_in_exec": "None",
        "execution_count": "None",
        "info": "None",
        "raise_error": "IPython.core.interactiveshell.ExecutionResult.raise_error",
        "result": "None",
        "success": "<property object at 0x102682a90>"
      }
    },
    "IPython.core.interactiveshell.InteractiveShellABC": {
      "items": {}
    },
    "IPython.utils.text.LSString": {
      "items": {
        "get_list": "IPython.utils.text.LSString.get_list",
        "get_nlstr": "IPython.utils.text.LSString.get_nlstr",
        "get_paths": "IPython.utils.text.LSString.get_paths",
        "get_spstr": "IPython.utils.text.LSString.get_spstr",
        "l": "<property object at 0x102287f90>",
        "list": "<property object at 0x102287f90>",
        "n": "<property object at 0x10228f090>",
        "nlstr": "<property object at 0x10228f090>",
        "p": "<property object at 0x10228f0e0>",
        "paths": "<property object at 0x10228f0e0>",
        "s": "<property object at 0x10228f040>",
        "spstr": "<property object at 0x10228f040>"
      }
    },
    "IPython.core.logger.Logger": {
      "items": {
        "close_log": "IPython.core.logger.Logger.logstop",
        "log": "IPython.core.logger.Logger.log",
        "log_write": "IPython.core.logger.Logger.log_write",
        "logmode": "<property object at 0x1024c0b30>",
        "logstart": "IPython.core.logger.Logger.logstart",
        "logstate": "IPython.core.logger.Logger.logstate",
        "logstop": "IPython.core.logger.Logger.logstop",
        "switch_log": "IPython.core.logger.Logger.switch_log"
      }
    },
    "IPython.core.macro.Macro": {
      "items": {}
    },
    "IPython.utils.contexts.NoOpContext": {
      "items": {}
    },
    "IPython.core.payload.PayloadManager": {
      "items": {
        "clear_payload": "IPython.core.payload.PayloadManager.clear_payload",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "read_payload": "IPython.core.payload.PayloadManager.read_payload",
        "write_payload": "IPython.core.payload.PayloadManager.write_payload"
      }
    },
    "IPython.core.prefilter.PrefilterManager": {
      "items": {
        "checkers": "<property object at 0x102435ea0>",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "find_handler": "IPython.core.prefilter.PrefilterManager.find_handler",
        "get_handler_by_esc": "IPython.core.prefilter.PrefilterManager.get_handler_by_esc",
        "get_handler_by_name": "IPython.core.prefilter.PrefilterManager.get_handler_by_name",
        "handlers": "<property object at 0x102435d60>",
        "init_checkers": "IPython.core.prefilter.PrefilterManager.init_checkers",
        "init_handlers": "IPython.core.prefilter.PrefilterManager.init_handlers",
        "prefilter_line": "IPython.core.prefilter.PrefilterManager.prefilter_line",
        "prefilter_line_info": "IPython.core.prefilter.PrefilterManager.prefilter_line_info",
        "prefilter_lines": "IPython.core.prefilter.PrefilterManager.prefilter_lines",
        "register_checker": "IPython.core.prefilter.PrefilterManager.register_checker",
        "register_handler": "IPython.core.prefilter.PrefilterManager.register_handler",
        "register_transformer": "IPython.core.prefilter.PrefilterManager.register_transformer",
        "sort_checkers": "IPython.core.prefilter.PrefilterManager.sort_checkers",
        "sort_transformers": "IPython.core.prefilter.PrefilterManager.sort_transformers",
        "transform_line": "IPython.core.prefilter.PrefilterManager.transform_line",
        "transformers": "<property object at 0x102435ae0>",
        "unregister_checker": "IPython.core.prefilter.PrefilterManager.unregister_checker",
        "unregister_handler": "IPython.core.prefilter.PrefilterManager.unregister_handler",
        "unregister_transformer": "IPython.core.prefilter.PrefilterManager.unregister_transformer"
      }
    },
    "IPython.core.interactiveshell.ProvisionalWarning": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.utils.text.SList": {
      "items": {
        "fields": "IPython.utils.text.SList.fields",
        "get_list": "IPython.utils.text.SList.get_list",
        "get_nlstr": "IPython.utils.text.SList.get_nlstr",
        "get_paths": "IPython.utils.text.SList.get_paths",
        "get_spstr": "IPython.utils.text.SList.get_spstr",
        "grep": "IPython.utils.text.SList.grep",
        "l": "<property object at 0x10228f180>",
        "list": "<property object at 0x10228f180>",
        "n": "<property object at 0x10228f220>",
        "nlstr": "<property object at 0x10228f220>",
        "p": "<property object at 0x10228f270>",
        "paths": "<property object at 0x10228f270>",
        "s": "<property object at 0x10228f1d0>",
        "sort": "IPython.utils.text.SList.sort",
        "spstr": "<property object at 0x10228f1d0>"
      }
    },
    "IPython.core.interactiveshell.SeparateUnicode": {
      "items": {
        "allow_none": "False",
        "info_text": "a unicode string",
        "metadata": "{}",
        "name": "None",
        "read_only": "False",
        "this_class": "None",
        "validate": "IPython.core.interactiveshell.SeparateUnicode.validate"
      }
    },
    "IPython.core.interactiveshell.SpaceInInput": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.utils.strdispatch.StrDispatch": {
      "items": {
        "add_re": "IPython.utils.strdispatch.StrDispatch.add_re",
        "add_s": "IPython.utils.strdispatch.StrDispatch.add_s",
        "dispatch": "IPython.utils.strdispatch.StrDispatch.dispatch",
        "flat_matches": "IPython.utils.strdispatch.StrDispatch.flat_matches",
        "s_matches": "IPython.utils.strdispatch.StrDispatch.s_matches"
      }
    },
    "IPython.utils.capture.CapturedIO": {
      "items": {
        "outputs": "<property object at 0x102672680>",
        "show": "IPython.utils.capture.CapturedIO.show",
        "stderr": "<property object at 0x102672630>",
        "stdout": "<property object at 0x1026725e0>"
      }
    },
    "IPython.utils.io.IOStream": {
      "items": {
        "close": "IPython.utils.io.IOStream.close",
        "closed": "<property object at 0x1024bd810>",
        "write": "IPython.utils.io.IOStream.write",
        "writelines": "IPython.utils.io.IOStream.writelines"
      }
    },
    "IPython.utils.io.Tee": {
      "items": {
        "close": "IPython.utils.io.Tee.close",
        "flush": "IPython.utils.io.Tee.flush",
        "write": "IPython.utils.io.Tee.write"
      }
    },
    "IPython.utils.capture.capture_output": {
      "items": {
        "display": "True",
        "stderr": "True",
        "stdout": "True"
      }
    },
    "IPython.core.magic.Bunch": {
      "items": {}
    },
    "IPython.core.magic.MagicAlias": {
      "items": {}
    },
    "IPython.core.magic.Magics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "None",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "False",
        "shell": "None"
      }
    },
    "IPython.core.magic.MagicsManager": {
      "items": {
        "auto_status": "IPython.core.magic.MagicsManager.auto_status",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "lsmagic": "IPython.core.magic.MagicsManager.lsmagic",
        "lsmagic_docs": "IPython.core.magic.MagicsManager.lsmagic_docs",
        "register": "IPython.core.magic.MagicsManager.register",
        "register_alias": "IPython.core.magic.MagicsManager.register_alias",
        "register_function": "IPython.core.magic.MagicsManager.register_function"
      }
    },
    "IPython.core.oinspect.Inspector": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "format_mime": "IPython.core.oinspect.Inspector.format_mime",
        "info": "IPython.core.oinspect.Inspector.info",
        "noinfo": "IPython.core.oinspect.Inspector.noinfo",
        "pdef": "IPython.core.oinspect.Inspector.pdef",
        "pdoc": "IPython.core.oinspect.Inspector.pdoc",
        "pfile": "IPython.core.oinspect.Inspector.pfile",
        "pinfo": "IPython.core.oinspect.Inspector.pinfo",
        "psearch": "IPython.core.oinspect.Inspector.psearch",
        "psource": "IPython.core.oinspect.Inspector.psource",
        "set_active_scheme": "IPython.core.oinspect.Inspector.set_active_scheme"
      }
    },
    "IPython.core.prefilter.AssignmentChecker": {
      "items": {
        "check": "IPython.core.prefilter.AssignmentChecker.check",
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.core.prefilter.AutoHandler": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "handle": "IPython.core.prefilter.AutoHandler.handle"
      }
    },
    "IPython.core.prefilter.AutoMagicChecker": {
      "items": {
        "check": "IPython.core.prefilter.AutoMagicChecker.check",
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.core.prefilter.AutocallChecker": {
      "items": {
        "check": "IPython.core.prefilter.AutocallChecker.check",
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.core.prefilter.EmacsChecker": {
      "items": {
        "check": "IPython.core.prefilter.EmacsChecker.check",
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.core.prefilter.EmacsHandler": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "handle": "IPython.core.prefilter.EmacsHandler.handle"
      }
    },
    "IPython.core.prefilter.IPyAutocallChecker": {
      "items": {
        "check": "IPython.core.prefilter.IPyAutocallChecker.check",
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.core.splitinput.LineInfo": {
      "items": {
        "ofind": "IPython.core.splitinput.LineInfo.ofind"
      }
    },
    "IPython.core.prefilter.MacroChecker": {
      "items": {
        "check": "IPython.core.prefilter.MacroChecker.check",
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.core.prefilter.MacroHandler": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "handle": "IPython.core.prefilter.MacroHandler.handle"
      }
    },
    "IPython.core.prefilter.MagicHandler": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "handle": "IPython.core.prefilter.MagicHandler.handle"
      }
    },
    "IPython.core.prefilter.PrefilterChecker": {
      "items": {
        "check": "IPython.core.prefilter.PrefilterChecker.check",
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.core.prefilter.PrefilterError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.prefilter.PrefilterHandler": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "handle": "IPython.core.prefilter.PrefilterHandler.handle"
      }
    },
    "IPython.core.prefilter.PrefilterTransformer": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "transform": "IPython.core.prefilter.PrefilterTransformer.transform"
      }
    },
    "IPython.core.prefilter.PythonOpsChecker": {
      "items": {
        "check": "IPython.core.prefilter.PythonOpsChecker.check",
        "cross_validation_lock": "<property object at 0x101c57180>"
      }
    },
    "IPython.utils.syspathcontext.prepended_to_syspath": {
      "items": {}
    },
    "IPython.core.magic_arguments.ArgDecorator": {
      "items": {
        "add_to_parser": "IPython.core.magic_arguments.ArgDecorator.add_to_parser"
      }
    },
    "IPython.core.magic_arguments.ArgMethodWrapper": {
      "items": {
        "add_to_parser": "IPython.core.magic_arguments.ArgMethodWrapper.add_to_parser"
      }
    },
    "IPython.core.magic_arguments.MagicArgumentParser": {
      "items": {
        "error": "IPython.core.magic_arguments.MagicArgumentParser.error",
        "parse_argstring": "IPython.core.magic_arguments.MagicArgumentParser.parse_argstring"
      }
    },
    "IPython.core.magic_arguments.MagicHelpFormatter": {
      "items": {
        "add_usage": "IPython.core.magic_arguments.MagicHelpFormatter.add_usage"
      }
    },
    "IPython.core.magic_arguments.argument": {
      "items": {
        "add_to_parser": "IPython.core.magic_arguments.ArgMethodWrapper.add_to_parser"
      }
    },
    "IPython.core.magic_arguments.argument_group": {
      "items": {
        "add_to_parser": "IPython.core.magic_arguments.argument_group.add_to_parser"
      }
    },
    "IPython.core.magic_arguments.defaults": {
      "items": {
        "add_to_parser": "IPython.core.magic_arguments.ArgMethodWrapper.add_to_parser"
      }
    },
    "IPython.core.magic_arguments.kwds": {
      "items": {
        "add_to_parser": "IPython.core.magic_arguments.ArgDecorator.add_to_parser"
      }
    },
    "IPython.core.magic_arguments.magic_arguments": {
      "items": {
        "add_to_parser": "IPython.core.magic_arguments.ArgDecorator.add_to_parser"
      }
    },
    "IPython.core.magics.basic.AsyncMagics": {
      "items": {
        "alias_magic": "IPython.core.magics.basic.BasicMagics.alias_magic",
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "autoawait": "IPython.core.magics.basic.AsyncMagics.autoawait",
        "colors": "IPython.core.magics.basic.BasicMagics.colors",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "doctest_mode": "IPython.core.magics.basic.BasicMagics.doctest_mode",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "gui": "IPython.core.magics.basic.BasicMagics.gui",
        "lsmagic": "IPython.core.magics.basic.BasicMagics.lsmagic",
        "magic": "IPython.core.magics.basic.BasicMagics.magic",
        "magics": "{'line': {'autoawait': 'autoawait'}, 'cell': {}}",
        "notebook": "IPython.core.magics.basic.BasicMagics.notebook",
        "options_table": "None",
        "page": "IPython.core.magics.basic.BasicMagics.page",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "pprint": "IPython.core.magics.basic.BasicMagics.pprint",
        "precision": "IPython.core.magics.basic.BasicMagics.precision",
        "quickref": "IPython.core.magics.basic.BasicMagics.quickref",
        "registered": "True",
        "shell": "None",
        "xmode": "IPython.core.magics.basic.BasicMagics.xmode"
      }
    },
    "IPython.core.magics.auto.AutoMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "autocall": "IPython.core.magics.auto.AutoMagics.autocall",
        "automagic": "IPython.core.magics.auto.AutoMagics.automagic",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "{'line': {'automagic': 'automagic', 'autocall': 'autocall'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "shell": "None"
      }
    },
    "IPython.core.magics.basic.BasicMagics": {
      "items": {
        "alias_magic": "IPython.core.magics.basic.BasicMagics.alias_magic",
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "colors": "IPython.core.magics.basic.BasicMagics.colors",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "doctest_mode": "IPython.core.magics.basic.BasicMagics.doctest_mode",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "gui": "IPython.core.magics.basic.BasicMagics.gui",
        "lsmagic": "IPython.core.magics.basic.BasicMagics.lsmagic",
        "magic": "IPython.core.magics.basic.BasicMagics.magic",
        "magics": "{'line': {'alias_magic': 'alias_magic', 'lsmagic': 'lsmagic', 'magic': 'magic', 'page': 'page', 'pprint': 'pprint', 'colors': 'colors', 'xmode': 'xmode', 'quickref': 'quickref', 'doctest_mode': 'doctest_mode', 'gui': 'gui', 'precision': 'precision', 'notebook': 'notebook'}, 'cell': {}}",
        "notebook": "IPython.core.magics.basic.BasicMagics.notebook",
        "options_table": "None",
        "page": "IPython.core.magics.basic.BasicMagics.page",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "pprint": "IPython.core.magics.basic.BasicMagics.pprint",
        "precision": "IPython.core.magics.basic.BasicMagics.precision",
        "quickref": "IPython.core.magics.basic.BasicMagics.quickref",
        "registered": "True",
        "shell": "None",
        "xmode": "IPython.core.magics.basic.BasicMagics.xmode"
      }
    },
    "IPython.core.magics.code.CodeMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "edit": "IPython.core.magics.code.CodeMagics.edit",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "load": "IPython.core.magics.code.CodeMagics.load",
        "loadpy": "IPython.core.magics.code.CodeMagics.loadpy",
        "magics": "{'line': {'save': 'save', 'pastebin': 'pastebin', 'loadpy': 'loadpy', 'load': 'load', 'edit': 'edit'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "pastebin": "IPython.core.magics.code.CodeMagics.pastebin",
        "registered": "True",
        "save": "IPython.core.magics.code.CodeMagics.save",
        "shell": "None"
      }
    },
    "IPython.core.magics.config.ConfigMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "config": "IPython.core.magics.config.ConfigMagics.config",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "{'line': {'config': 'config'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "shell": "None"
      }
    },
    "IPython.core.magics.display.DisplayMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "html": "IPython.core.magics.display.DisplayMagics.html",
        "javascript": "IPython.core.magics.display.DisplayMagics.javascript",
        "js": "IPython.core.magics.display.DisplayMagics.js",
        "latex": "IPython.core.magics.display.DisplayMagics.latex",
        "magics": "{'line': {}, 'cell': {'js': 'js', 'javascript': 'javascript', 'latex': 'latex', 'svg': 'svg', 'html': 'html', 'markdown': 'markdown'}}",
        "markdown": "IPython.core.magics.display.DisplayMagics.markdown",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "shell": "None",
        "svg": "IPython.core.magics.display.DisplayMagics.svg"
      }
    },
    "IPython.core.magics.execution.ExecutionMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "capture": "IPython.core.magics.execution.ExecutionMagics.capture",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "debug": "IPython.core.magics.execution.ExecutionMagics.debug",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "macro": "IPython.core.magics.execution.ExecutionMagics.macro",
        "magics": "{'line': {'prun': 'prun', 'pdb': 'pdb', 'debug': 'debug', 'tb': 'tb', 'run': 'run', 'timeit': 'timeit', 'time': 'time', 'macro': 'macro'}, 'cell': {'prun': 'prun', 'debug': 'debug', 'timeit': 'timeit', 'time': 'time', 'capture': 'capture'}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "pdb": "IPython.core.magics.execution.ExecutionMagics.pdb",
        "prun": "IPython.core.magics.execution.ExecutionMagics.prun",
        "registered": "True",
        "run": "IPython.core.magics.execution.ExecutionMagics.run",
        "shell": "None",
        "tb": "IPython.core.magics.execution.ExecutionMagics.tb",
        "time": "IPython.core.magics.execution.ExecutionMagics.time",
        "timeit": "IPython.core.magics.execution.ExecutionMagics.timeit"
      }
    },
    "IPython.core.magics.extension.ExtensionMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "load_ext": "IPython.core.magics.extension.ExtensionMagics.load_ext",
        "magics": "{'line': {'load_ext': 'load_ext', 'unload_ext': 'unload_ext', 'reload_ext': 'reload_ext'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "reload_ext": "IPython.core.magics.extension.ExtensionMagics.reload_ext",
        "shell": "None",
        "unload_ext": "IPython.core.magics.extension.ExtensionMagics.unload_ext"
      }
    },
    "IPython.core.magics.history.HistoryMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "history": "IPython.core.magics.history.HistoryMagics.history",
        "magics": "{'line': {'history': 'history', 'recall': 'recall', 'rerun': 'rerun'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "recall": "IPython.core.magics.history.HistoryMagics.recall",
        "registered": "True",
        "rerun": "IPython.core.magics.history.HistoryMagics.rerun",
        "shell": "None"
      }
    },
    "IPython.core.magics.logging.LoggingMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "logoff": "IPython.core.magics.logging.LoggingMagics.logoff",
        "logon": "IPython.core.magics.logging.LoggingMagics.logon",
        "logstart": "IPython.core.magics.logging.LoggingMagics.logstart",
        "logstate": "IPython.core.magics.logging.LoggingMagics.logstate",
        "logstop": "IPython.core.magics.logging.LoggingMagics.logstop",
        "magics": "{'line': {'logstart': 'logstart', 'logstop': 'logstop', 'logoff': 'logoff', 'logon': 'logon', 'logstate': 'logstate'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "shell": "None"
      }
    },
    "IPython.core.magics.code.MacroToEdit": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.core.magics.namespace.NamespaceMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "{'line': {'pinfo': 'pinfo', 'pinfo2': 'pinfo2', 'pdef': 'pdef', 'pdoc': 'pdoc', 'psource': 'psource', 'pfile': 'pfile', 'psearch': 'psearch', 'who_ls': 'who_ls', 'who': 'who', 'whos': 'whos', 'reset': 'reset', 'reset_selective': 'reset_selective', 'xdel': 'xdel'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "pdef": "IPython.core.magics.namespace.NamespaceMagics.pdef",
        "pdoc": "IPython.core.magics.namespace.NamespaceMagics.pdoc",
        "pfile": "IPython.core.magics.namespace.NamespaceMagics.pfile",
        "pinfo": "IPython.core.magics.namespace.NamespaceMagics.pinfo",
        "pinfo2": "IPython.core.magics.namespace.NamespaceMagics.pinfo2",
        "psearch": "IPython.core.magics.namespace.NamespaceMagics.psearch",
        "psource": "IPython.core.magics.namespace.NamespaceMagics.psource",
        "registered": "True",
        "reset": "IPython.core.magics.namespace.NamespaceMagics.reset",
        "reset_selective": "IPython.core.magics.namespace.NamespaceMagics.reset_selective",
        "shell": "None",
        "who": "IPython.core.magics.namespace.NamespaceMagics.who",
        "who_ls": "IPython.core.magics.namespace.NamespaceMagics.who_ls",
        "whos": "IPython.core.magics.namespace.NamespaceMagics.whos",
        "xdel": "IPython.core.magics.namespace.NamespaceMagics.xdel"
      }
    },
    "IPython.core.magics.osm.OSMagics": {
      "items": {
        "alias": "IPython.core.magics.osm.OSMagics.alias",
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "bang": "IPython.core.magics.osm.OSMagics.sx",
        "bookmark": "IPython.core.magics.osm.OSMagics.bookmark",
        "cd": "IPython.core.magics.osm.OSMagics.cd",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "dhist": "IPython.core.magics.osm.OSMagics.dhist",
        "dirs": "IPython.core.magics.osm.OSMagics.dirs",
        "env": "IPython.core.magics.osm.OSMagics.env",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "isexec": "IPython.core.magics.osm.OSMagics.isexec",
        "magics": "{'line': {'alias': 'alias', 'unalias': 'unalias', 'rehashx': 'rehashx', 'pwd': 'pwd', 'cd': 'cd', 'env': 'env', 'set_env': 'set_env', 'pushd': 'pushd', 'popd': 'popd', 'dirs': 'dirs', 'dhist': 'dhist', 'sc': 'sc', 'sx': 'sx', 'system': 'sx', 'bookmark': 'bookmark', 'pycat': 'pycat'}, 'cell': {'sx': 'sx', 'system': 'sx', '!': 'sx', 'writefile': 'writefile'}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "popd": "IPython.core.magics.osm.OSMagics.popd",
        "pushd": "IPython.core.magics.osm.OSMagics.pushd",
        "pwd": "IPython.core.magics.osm.OSMagics.pwd",
        "pycat": "IPython.core.magics.osm.OSMagics.pycat",
        "registered": "True",
        "rehashx": "IPython.core.magics.osm.OSMagics.rehashx",
        "sc": "IPython.core.magics.osm.OSMagics.sc",
        "set_env": "IPython.core.magics.osm.OSMagics.set_env",
        "shell": "None",
        "sx": "IPython.core.magics.osm.OSMagics.sx",
        "system": "IPython.core.magics.osm.OSMagics.sx",
        "unalias": "IPython.core.magics.osm.OSMagics.unalias",
        "writefile": "IPython.core.magics.osm.OSMagics.writefile"
      }
    },
    "IPython.core.magics.packaging.PackagingMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "conda": "IPython.core.magics.packaging.PackagingMagics.conda",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "{'line': {'pip': 'pip', 'conda': 'conda'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "pip": "IPython.core.magics.packaging.PackagingMagics.pip",
        "registered": "True",
        "shell": "None"
      }
    },
    "IPython.core.magics.pylab.PylabMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "{'line': {'matplotlib': 'matplotlib', 'pylab': 'pylab'}, 'cell': {}}",
        "matplotlib": "IPython.core.magics.pylab.PylabMagics.matplotlib",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "pylab": "IPython.core.magics.pylab.PylabMagics.pylab",
        "registered": "True",
        "shell": "None"
      }
    },
    "IPython.core.magics.script.ScriptMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "kill_bg_processes": "IPython.core.magics.script.ScriptMagics.kill_bg_processes",
        "killbgscripts": "IPython.core.magics.script.ScriptMagics.killbgscripts",
        "magics": "{'line': {'killbgscripts': 'killbgscripts'}, 'cell': {'script': 'shebang'}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "shebang": "IPython.core.magics.script.ScriptMagics.shebang",
        "shell": "None"
      }
    },
    "IPython.core.magics.UserMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "{'line': {}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "shell": "None"
      }
    },
    "IPython.core.magics.basic.MagicsDisplay": {
      "items": {}
    },
    "IPython.core.magics.code.InteractivelyDefined": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.utils.contexts.preserve_keys": {
      "items": {}
    },
    "IPython.core.magics.execution.TimeitResult": {
      "items": {
        "average": "<property object at 0x103342630>",
        "stdev": "<property object at 0x103342680>"
      }
    },
    "IPython.core.magics.execution.TimeitTemplateFiller": {
      "items": {
        "visit_For": "IPython.core.magics.execution.TimeitTemplateFiller.visit_For",
        "visit_FunctionDef": "IPython.core.magics.execution.TimeitTemplateFiller.visit_FunctionDef"
      }
    },
    "IPython.core.magics.execution.Timer": {
      "items": {
        "timeit": "IPython.core.magics.execution.Timer.timeit"
      }
    },
    "IPython.lib.backgroundjobs.BackgroundJobManager": {
      "items": {
        "completed": "<property object at 0x1033bc1d0>",
        "dead": "<property object at 0x1033bc180>",
        "flush": "IPython.lib.backgroundjobs.BackgroundJobManager.flush",
        "new": "IPython.lib.backgroundjobs.BackgroundJobManager.new",
        "remove": "IPython.lib.backgroundjobs.BackgroundJobManager.remove",
        "result": "IPython.lib.backgroundjobs.BackgroundJobManager.result",
        "running": "<property object at 0x1033bc130>",
        "status": "IPython.lib.backgroundjobs.BackgroundJobManager.status",
        "traceback": "IPython.lib.backgroundjobs.BackgroundJobManager.traceback"
      }
    },
    "IPython.core.shellapp.InteractiveShellApp": {
      "items": {
        "cross_validation_lock": "<property object at 0x101c57180>",
        "init_code": "IPython.core.shellapp.InteractiveShellApp.init_code",
        "init_extensions": "IPython.core.shellapp.InteractiveShellApp.init_extensions",
        "init_gui_pylab": "IPython.core.shellapp.InteractiveShellApp.init_gui_pylab",
        "init_path": "IPython.core.shellapp.InteractiveShellApp.init_path",
        "init_shell": "IPython.core.shellapp.InteractiveShellApp.init_shell"
      }
    },
    "IPython.terminal.pt_inputhooks.UnknownBackend": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.lib.display.Audio": {
      "items": {
        "autoplay_attr": "IPython.lib.display.Audio.autoplay_attr",
        "element_id_attr": "IPython.lib.display.Audio.element_id_attr",
        "metadata": "None",
        "reload": "IPython.lib.display.Audio.reload",
        "src_attr": "IPython.lib.display.Audio.src_attr"
      }
    },
    "IPython.lib.display.Code": {
      "items": {
        "metadata": "None",
        "reload": "IPython.core.display.DisplayObject.reload"
      }
    },
    "IPython.lib.display.FileLink": {
      "items": {
        "html_link_str": "<a href='%s' target='_blank'>%s</a>"
      }
    },
    "IPython.lib.display.FileLinks": {
      "items": {
        "html_link_str": "<a href='%s' target='_blank'>%s</a>"
      }
    },
    "IPython.lib.display.IFrame": {
      "items": {
        "iframe": "\n        <iframe\n            width=\"{width}\"\n            height=\"{height}\"\n            src=\"{src}{params}\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        "
      }
    },
    "IPython.lib.display.ScribdDocument": {
      "items": {
        "iframe": "\n        <iframe\n            width=\"{width}\"\n            height=\"{height}\"\n            src=\"{src}{params}\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        "
      }
    },
    "IPython.lib.display.VimeoVideo": {
      "items": {
        "iframe": "\n        <iframe\n            width=\"{width}\"\n            height=\"{height}\"\n            src=\"{src}{params}\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        "
      }
    },
    "IPython.lib.display.YouTubeVideo": {
      "items": {
        "iframe": "\n        <iframe\n            width=\"{width}\"\n            height=\"{height}\"\n            src=\"{src}{params}\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        "
      }
    },
    "IPython.extensions.storemagic.StoreMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "{'line': {'store': 'store'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "shell": "None",
        "store": "IPython.extensions.storemagic.StoreMagics.store"
      }
    },
    "IPython.lib.backgroundjobs.BackgroundJobBase": {
      "items": {
        "daemon": "<property object at 0x1019fa090>",
        "ident": "<property object at 0x1019efea0>",
        "name": "<property object at 0x1019eff40>",
        "native_id": "<property object at 0x1019eff90>",
        "run": "IPython.lib.backgroundjobs.BackgroundJobBase.run",
        "stat_completed": "Completed",
        "stat_completed_c": "2",
        "stat_created": "Created",
        "stat_created_c": "0",
        "stat_dead": "Dead (Exception), call jobs.traceback() for details",
        "stat_dead_c": "-1",
        "stat_running": "Running",
        "stat_running_c": "1",
        "traceback": "IPython.lib.backgroundjobs.BackgroundJobBase.traceback"
      }
    },
    "IPython.lib.backgroundjobs.BackgroundJobExpr": {
      "items": {
        "call": "IPython.lib.backgroundjobs.BackgroundJobExpr.call",
        "daemon": "<property object at 0x1019fa090>",
        "ident": "<property object at 0x1019efea0>",
        "name": "<property object at 0x1019eff40>",
        "native_id": "<property object at 0x1019eff90>",
        "run": "IPython.lib.backgroundjobs.BackgroundJobBase.run",
        "stat_completed": "Completed",
        "stat_completed_c": "2",
        "stat_created": "Created",
        "stat_created_c": "0",
        "stat_dead": "Dead (Exception), call jobs.traceback() for details",
        "stat_dead_c": "-1",
        "stat_running": "Running",
        "stat_running_c": "1",
        "traceback": "IPython.lib.backgroundjobs.BackgroundJobBase.traceback"
      }
    },
    "IPython.lib.backgroundjobs.BackgroundJobFunc": {
      "items": {
        "call": "IPython.lib.backgroundjobs.BackgroundJobFunc.call",
        "daemon": "<property object at 0x1019fa090>",
        "ident": "<property object at 0x1019efea0>",
        "name": "<property object at 0x1019eff40>",
        "native_id": "<property object at 0x1019eff90>",
        "run": "IPython.lib.backgroundjobs.BackgroundJobBase.run",
        "stat_completed": "Completed",
        "stat_completed_c": "2",
        "stat_created": "Created",
        "stat_created_c": "0",
        "stat_dead": "Dead (Exception), call jobs.traceback() for details",
        "stat_dead_c": "-1",
        "stat_running": "Running",
        "stat_running_c": "1",
        "traceback": "IPython.lib.backgroundjobs.BackgroundJobBase.traceback"
      }
    },
    "IPython.lib.clipboard.ClipboardEmpty": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.terminal.ptutils.IPythonPTCompleter": {
      "items": {
        "get_completions": "IPython.terminal.ptutils.IPythonPTCompleter.get_completions",
        "ipy_completer": "<property object at 0x1032226d0>"
      }
    },
    "IPython.terminal.debugger.TerminalPdb": {
      "items": {
        "cmdloop": "IPython.terminal.debugger.TerminalPdb.cmdloop",
        "commands_resuming": "['do_continue', 'do_step', 'do_next', 'do_return', 'do_quit', 'do_jump']",
        "do_d": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_debug": "IPython.core.debugger.Pdb.do_debug",
        "do_down": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_l": "IPython.core.debugger.Pdb.do_list",
        "do_list": "IPython.core.debugger.Pdb.do_list",
        "do_ll": "IPython.core.debugger.Pdb.do_longlist",
        "do_longlist": "IPython.core.debugger.Pdb.do_longlist",
        "do_pdef": "IPython.core.debugger.Pdb.do_pdef",
        "do_pdoc": "IPython.core.debugger.Pdb.do_pdoc",
        "do_pfile": "IPython.core.debugger.Pdb.do_pfile",
        "do_pinfo": "IPython.core.debugger.Pdb.do_pinfo",
        "do_pinfo2": "IPython.core.debugger.Pdb.do_pinfo2",
        "do_psource": "IPython.core.debugger.Pdb.do_psource",
        "do_q": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_quit": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_u": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_up": "IPython.core.debugger.decorate_fn_with_doc.<locals>.wrapper",
        "do_w": "IPython.core.debugger.Pdb.do_where",
        "do_where": "IPython.core.debugger.Pdb.do_where",
        "doc_header": "Documented commands (type help <topic>):",
        "format_stack_entry": "IPython.core.debugger.Pdb.format_stack_entry",
        "getsourcelines": "IPython.core.debugger.Pdb.getsourcelines",
        "identchars": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_",
        "interaction": "IPython.core.debugger.Pdb.interaction",
        "intro": "None",
        "misc_header": "Miscellaneous help topics:",
        "new_do_down": "IPython.core.debugger.Pdb.new_do_down",
        "new_do_frame": "IPython.core.debugger.Pdb.new_do_frame",
        "new_do_quit": "IPython.core.debugger.Pdb.new_do_quit",
        "new_do_restart": "IPython.core.debugger.Pdb.new_do_restart",
        "new_do_up": "IPython.core.debugger.Pdb.new_do_up",
        "nohelp": "*** No help on %s",
        "print_list_lines": "IPython.core.debugger.Pdb.print_list_lines",
        "print_stack_entry": "IPython.core.debugger.Pdb.print_stack_entry",
        "print_stack_trace": "IPython.core.debugger.Pdb.print_stack_trace",
        "prompt": "(Cmd) ",
        "pt_init": "IPython.terminal.debugger.TerminalPdb.pt_init",
        "ruler": "=",
        "set_colors": "IPython.core.debugger.Pdb.set_colors",
        "undoc_header": "Undocumented commands:",
        "use_rawinput": "1"
      }
    },
    "IPython.terminal.embed.EmbeddedMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "exit_raise": "IPython.terminal.embed.EmbeddedMagics.exit_raise",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "kill_embedded": "IPython.terminal.embed.EmbeddedMagics.kill_embedded",
        "magics": "{'line': {'kill_embedded': 'kill_embedded', 'exit_raise': 'exit_raise'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "registered": "True",
        "shell": "None"
      }
    },
    "IPython.terminal.embed.InteractiveShellEmbed": {
      "items": {
        "active_eventloop": "None",
        "all_ns_refs": "<property object at 0x102682f90>",
        "ask_exit": "IPython.terminal.interactiveshell.TerminalInteractiveShell.ask_exit",
        "ask_yes_no": "IPython.core.interactiveshell.InteractiveShell.ask_yes_no",
        "atexit_operations": "IPython.core.interactiveshell.InteractiveShell.atexit_operations",
        "auto_rewrite_input": "IPython.terminal.interactiveshell.TerminalInteractiveShell.auto_rewrite_input",
        "banner": "<property object at 0x102682e50>",
        "call_pdb": "<property object at 0x102682ef0>",
        "check_complete": "IPython.core.interactiveshell.InteractiveShell.check_complete",
        "cleanup": "IPython.core.interactiveshell.InteractiveShell.cleanup",
        "clear_main_mod_cache": "IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache",
        "color_depth": "<property object at 0x103239bd0>",
        "complete": "IPython.core.interactiveshell.InteractiveShell.complete",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "data_pub_class": "None",
        "debugger": "IPython.core.interactiveshell.InteractiveShell.debugger",
        "debugger_cls": "<property object at 0x1032399f0>",
        "debugger_history": "None",
        "default_user_namespaces": "True",
        "define_macro": "IPython.core.interactiveshell.InteractiveShell.define_macro",
        "del_var": "IPython.core.interactiveshell.InteractiveShell.del_var",
        "drop_by_id": "IPython.core.interactiveshell.InteractiveShell.drop_by_id",
        "embedded_active": "<property object at 0x1032419a0>",
        "enable_gui": "IPython.terminal.interactiveshell.TerminalInteractiveShell.enable_gui",
        "enable_matplotlib": "IPython.core.interactiveshell.InteractiveShell.enable_matplotlib",
        "enable_pylab": "IPython.core.interactiveshell.InteractiveShell.enable_pylab",
        "enable_win_unicode_console": "IPython.terminal.interactiveshell.TerminalInteractiveShell.enable_win_unicode_console",
        "ev": "IPython.core.interactiveshell.InteractiveShell.ev",
        "ex": "IPython.core.interactiveshell.InteractiveShell.ex",
        "excepthook": "IPython.core.interactiveshell.InteractiveShell.excepthook",
        "extract_input_lines": "IPython.core.interactiveshell.InteractiveShell.extract_input_lines",
        "find_cell_magic": "IPython.core.interactiveshell.InteractiveShell.find_cell_magic",
        "find_line_magic": "IPython.core.interactiveshell.InteractiveShell.find_line_magic",
        "find_magic": "IPython.core.interactiveshell.InteractiveShell.find_magic",
        "find_user_code": "IPython.core.interactiveshell.InteractiveShell.find_user_code",
        "get_exception_only": "IPython.core.interactiveshell.InteractiveShell.get_exception_only",
        "get_ipython": "IPython.core.interactiveshell.InteractiveShell.get_ipython",
        "getoutput": "IPython.core.interactiveshell.InteractiveShell.getoutput",
        "init_alias": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_alias",
        "init_builtins": "IPython.core.interactiveshell.InteractiveShell.init_builtins",
        "init_completer": "IPython.core.interactiveshell.InteractiveShell.init_completer",
        "init_create_namespaces": "IPython.core.interactiveshell.InteractiveShell.init_create_namespaces",
        "init_data_pub": "IPython.core.interactiveshell.InteractiveShell.init_data_pub",
        "init_deprecation_warnings": "IPython.core.interactiveshell.InteractiveShell.init_deprecation_warnings",
        "init_display_formatter": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_display_formatter",
        "init_display_pub": "IPython.core.interactiveshell.InteractiveShell.init_display_pub",
        "init_displayhook": "IPython.core.interactiveshell.InteractiveShell.init_displayhook",
        "init_encoding": "IPython.core.interactiveshell.InteractiveShell.init_encoding",
        "init_environment": "IPython.core.interactiveshell.InteractiveShell.init_environment",
        "init_events": "IPython.core.interactiveshell.InteractiveShell.init_events",
        "init_extension_manager": "IPython.core.interactiveshell.InteractiveShell.init_extension_manager",
        "init_history": "IPython.core.interactiveshell.InteractiveShell.init_history",
        "init_hooks": "IPython.core.interactiveshell.InteractiveShell.init_hooks",
        "init_instance_attrs": "IPython.core.interactiveshell.InteractiveShell.init_instance_attrs",
        "init_io": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_io",
        "init_ipython_dir": "IPython.core.interactiveshell.InteractiveShell.init_ipython_dir",
        "init_logger": "IPython.core.interactiveshell.InteractiveShell.init_logger",
        "init_logstart": "IPython.core.interactiveshell.InteractiveShell.init_logstart",
        "init_magics": "IPython.terminal.embed.InteractiveShellEmbed.init_magics",
        "init_payload": "IPython.core.interactiveshell.InteractiveShell.init_payload",
        "init_pdb": "IPython.core.interactiveshell.InteractiveShell.init_pdb",
        "init_prefilter": "IPython.core.interactiveshell.InteractiveShell.init_prefilter",
        "init_profile_dir": "IPython.core.interactiveshell.InteractiveShell.init_profile_dir",
        "init_prompt_toolkit_cli": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_prompt_toolkit_cli",
        "init_prompts": "IPython.core.interactiveshell.InteractiveShell.init_prompts",
        "init_pushd_popd_magic": "IPython.core.interactiveshell.InteractiveShell.init_pushd_popd_magic",
        "init_readline": "IPython.core.interactiveshell.InteractiveShell.init_readline",
        "init_sys_modules": "IPython.terminal.embed.InteractiveShellEmbed.init_sys_modules",
        "init_traceback_handlers": "IPython.core.interactiveshell.InteractiveShell.init_traceback_handlers",
        "init_user_ns": "IPython.core.interactiveshell.InteractiveShell.init_user_ns",
        "init_virtualenv": "IPython.core.interactiveshell.InteractiveShell.init_virtualenv",
        "input_splitter": "<property object at 0x102682c70>",
        "input_transformers_cleanup": "<property object at 0x102682c20>",
        "inputhook": "IPython.terminal.interactiveshell.TerminalInteractiveShell.inputhook",
        "interact": "IPython.terminal.interactiveshell.TerminalInteractiveShell.interact",
        "loop_runner_map": "{'asyncio': (<IPython.core.async_helpers._AsyncIORunner object at 0x1026815b0>, True), 'curio': (<function _curio_runner at 0x102683280>, True), 'trio': (<function _trio_runner at 0x102683550>, True), 'sync': (<function _pseudo_sync_runner at 0x1026835e0>, False)}",
        "magic": "IPython.core.interactiveshell.InteractiveShell.magic",
        "mainloop": "IPython.terminal.embed.InteractiveShellEmbed.mainloop",
        "mktempfile": "IPython.core.interactiveshell.InteractiveShell.mktempfile",
        "new_main_mod": "IPython.core.interactiveshell.InteractiveShell.new_main_mod",
        "object_inspect": "IPython.core.interactiveshell.InteractiveShell.object_inspect",
        "object_inspect_mime": "IPython.core.interactiveshell.InteractiveShell.object_inspect_mime",
        "object_inspect_text": "IPython.core.interactiveshell.InteractiveShell.object_inspect_text",
        "prepare_user_module": "IPython.core.interactiveshell.InteractiveShell.prepare_user_module",
        "profile": "<property object at 0x102682db0>",
        "prompt_for_code": "IPython.terminal.interactiveshell.TerminalInteractiveShell.prompt_for_code",
        "pt_app": "None",
        "pt_complete_style": "<property object at 0x103239b80>",
        "push": "IPython.core.interactiveshell.InteractiveShell.push",
        "pylab_gui_select": "None",
        "refresh_style": "IPython.terminal.interactiveshell.TerminalInteractiveShell.refresh_style",
        "register_magic_function": "IPython.core.magic.MagicsManager.register_function",
        "register_post_execute": "IPython.core.interactiveshell.InteractiveShell.register_post_execute",
        "reset": "IPython.core.interactiveshell.InteractiveShell.reset",
        "reset_selective": "IPython.core.interactiveshell.InteractiveShell.reset_selective",
        "restore_sys_module_state": "IPython.core.interactiveshell.InteractiveShell.restore_sys_module_state",
        "restore_term_title": "IPython.terminal.interactiveshell.TerminalInteractiveShell.restore_term_title",
        "rl_next_input": "None",
        "run_ast_nodes": "IPython.core.interactiveshell.InteractiveShell.run_ast_nodes",
        "run_cell": "IPython.core.interactiveshell.InteractiveShell.run_cell",
        "run_cell_async": "IPython.core.interactiveshell.InteractiveShell.run_cell_async",
        "run_cell_magic": "IPython.core.interactiveshell.InteractiveShell.run_cell_magic",
        "run_code": "IPython.core.interactiveshell.InteractiveShell.run_code",
        "run_line_magic": "IPython.core.interactiveshell.InteractiveShell.run_line_magic",
        "runcode": "IPython.core.interactiveshell.InteractiveShell.run_code",
        "safe_execfile": "IPython.core.interactiveshell.InteractiveShell.safe_execfile",
        "safe_execfile_ipy": "IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy",
        "safe_run_module": "IPython.core.interactiveshell.InteractiveShell.safe_run_module",
        "save_sys_module_state": "IPython.core.interactiveshell.InteractiveShell.save_sys_module_state",
        "separate_in": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b580>",
        "separate_out": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b5e0>",
        "separate_out2": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b640>",
        "set_autoindent": "IPython.core.interactiveshell.InteractiveShell.set_autoindent",
        "set_completer_frame": "IPython.core.interactiveshell.InteractiveShell.set_completer_frame",
        "set_custom_completer": "IPython.core.interactiveshell.InteractiveShell.set_custom_completer",
        "set_custom_exc": "IPython.core.interactiveshell.InteractiveShell.set_custom_exc",
        "set_hook": "IPython.core.interactiveshell.InteractiveShell.set_hook",
        "set_next_input": "IPython.core.interactiveshell.InteractiveShell.set_next_input",
        "set_trio_runner": "IPython.core.interactiveshell.InteractiveShell.set_trio_runner",
        "should_run_async": "IPython.core.interactiveshell.InteractiveShell.should_run_async",
        "show_banner": "IPython.core.interactiveshell.InteractiveShell.show_banner",
        "show_usage": "IPython.core.interactiveshell.InteractiveShell.show_usage",
        "show_usage_error": "IPython.core.interactiveshell.InteractiveShell.show_usage_error",
        "showindentationerror": "IPython.core.interactiveshell.InteractiveShell.showindentationerror",
        "showsyntaxerror": "IPython.core.interactiveshell.InteractiveShell.showsyntaxerror",
        "showtraceback": "IPython.core.interactiveshell.InteractiveShell.showtraceback",
        "switch_doctest_mode": "IPython.terminal.interactiveshell.TerminalInteractiveShell.switch_doctest_mode",
        "system": "IPython.core.interactiveshell.InteractiveShell.system_raw",
        "system_piped": "IPython.core.interactiveshell.InteractiveShell.system_piped",
        "system_raw": "IPython.core.interactiveshell.InteractiveShell.system_raw",
        "transform_ast": "IPython.core.interactiveshell.InteractiveShell.transform_ast",
        "transform_cell": "IPython.core.interactiveshell.InteractiveShell.transform_cell",
        "user_expressions": "IPython.core.interactiveshell.InteractiveShell.user_expressions",
        "user_global_ns": "<property object at 0x102682f40>",
        "var_expand": "IPython.core.interactiveshell.InteractiveShell.var_expand",
        "write": "IPython.core.interactiveshell.InteractiveShell.write",
        "write_err": "IPython.core.interactiveshell.InteractiveShell.write_err"
      }
    },
    "IPython.terminal.embed.KillEmbedded": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.terminal.interactiveshell.TerminalInteractiveShell": {
      "items": {
        "active_eventloop": "None",
        "all_ns_refs": "<property object at 0x102682f90>",
        "ask_exit": "IPython.terminal.interactiveshell.TerminalInteractiveShell.ask_exit",
        "ask_yes_no": "IPython.core.interactiveshell.InteractiveShell.ask_yes_no",
        "atexit_operations": "IPython.core.interactiveshell.InteractiveShell.atexit_operations",
        "auto_rewrite_input": "IPython.terminal.interactiveshell.TerminalInteractiveShell.auto_rewrite_input",
        "banner": "<property object at 0x102682e50>",
        "call_pdb": "<property object at 0x102682ef0>",
        "check_complete": "IPython.core.interactiveshell.InteractiveShell.check_complete",
        "cleanup": "IPython.core.interactiveshell.InteractiveShell.cleanup",
        "clear_main_mod_cache": "IPython.core.interactiveshell.InteractiveShell.clear_main_mod_cache",
        "color_depth": "<property object at 0x103239bd0>",
        "complete": "IPython.core.interactiveshell.InteractiveShell.complete",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "data_pub_class": "None",
        "debugger": "IPython.core.interactiveshell.InteractiveShell.debugger",
        "debugger_cls": "<property object at 0x1032399f0>",
        "debugger_history": "None",
        "default_user_namespaces": "True",
        "define_macro": "IPython.core.interactiveshell.InteractiveShell.define_macro",
        "del_var": "IPython.core.interactiveshell.InteractiveShell.del_var",
        "drop_by_id": "IPython.core.interactiveshell.InteractiveShell.drop_by_id",
        "enable_gui": "IPython.terminal.interactiveshell.TerminalInteractiveShell.enable_gui",
        "enable_matplotlib": "IPython.core.interactiveshell.InteractiveShell.enable_matplotlib",
        "enable_pylab": "IPython.core.interactiveshell.InteractiveShell.enable_pylab",
        "enable_win_unicode_console": "IPython.terminal.interactiveshell.TerminalInteractiveShell.enable_win_unicode_console",
        "ev": "IPython.core.interactiveshell.InteractiveShell.ev",
        "ex": "IPython.core.interactiveshell.InteractiveShell.ex",
        "excepthook": "IPython.core.interactiveshell.InteractiveShell.excepthook",
        "extract_input_lines": "IPython.core.interactiveshell.InteractiveShell.extract_input_lines",
        "find_cell_magic": "IPython.core.interactiveshell.InteractiveShell.find_cell_magic",
        "find_line_magic": "IPython.core.interactiveshell.InteractiveShell.find_line_magic",
        "find_magic": "IPython.core.interactiveshell.InteractiveShell.find_magic",
        "find_user_code": "IPython.core.interactiveshell.InteractiveShell.find_user_code",
        "get_exception_only": "IPython.core.interactiveshell.InteractiveShell.get_exception_only",
        "get_ipython": "IPython.core.interactiveshell.InteractiveShell.get_ipython",
        "getoutput": "IPython.core.interactiveshell.InteractiveShell.getoutput",
        "init_alias": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_alias",
        "init_builtins": "IPython.core.interactiveshell.InteractiveShell.init_builtins",
        "init_completer": "IPython.core.interactiveshell.InteractiveShell.init_completer",
        "init_create_namespaces": "IPython.core.interactiveshell.InteractiveShell.init_create_namespaces",
        "init_data_pub": "IPython.core.interactiveshell.InteractiveShell.init_data_pub",
        "init_deprecation_warnings": "IPython.core.interactiveshell.InteractiveShell.init_deprecation_warnings",
        "init_display_formatter": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_display_formatter",
        "init_display_pub": "IPython.core.interactiveshell.InteractiveShell.init_display_pub",
        "init_displayhook": "IPython.core.interactiveshell.InteractiveShell.init_displayhook",
        "init_encoding": "IPython.core.interactiveshell.InteractiveShell.init_encoding",
        "init_environment": "IPython.core.interactiveshell.InteractiveShell.init_environment",
        "init_events": "IPython.core.interactiveshell.InteractiveShell.init_events",
        "init_extension_manager": "IPython.core.interactiveshell.InteractiveShell.init_extension_manager",
        "init_history": "IPython.core.interactiveshell.InteractiveShell.init_history",
        "init_hooks": "IPython.core.interactiveshell.InteractiveShell.init_hooks",
        "init_instance_attrs": "IPython.core.interactiveshell.InteractiveShell.init_instance_attrs",
        "init_io": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_io",
        "init_ipython_dir": "IPython.core.interactiveshell.InteractiveShell.init_ipython_dir",
        "init_logger": "IPython.core.interactiveshell.InteractiveShell.init_logger",
        "init_logstart": "IPython.core.interactiveshell.InteractiveShell.init_logstart",
        "init_magics": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_magics",
        "init_payload": "IPython.core.interactiveshell.InteractiveShell.init_payload",
        "init_pdb": "IPython.core.interactiveshell.InteractiveShell.init_pdb",
        "init_prefilter": "IPython.core.interactiveshell.InteractiveShell.init_prefilter",
        "init_profile_dir": "IPython.core.interactiveshell.InteractiveShell.init_profile_dir",
        "init_prompt_toolkit_cli": "IPython.terminal.interactiveshell.TerminalInteractiveShell.init_prompt_toolkit_cli",
        "init_prompts": "IPython.core.interactiveshell.InteractiveShell.init_prompts",
        "init_pushd_popd_magic": "IPython.core.interactiveshell.InteractiveShell.init_pushd_popd_magic",
        "init_readline": "IPython.core.interactiveshell.InteractiveShell.init_readline",
        "init_sys_modules": "IPython.core.interactiveshell.InteractiveShell.init_sys_modules",
        "init_traceback_handlers": "IPython.core.interactiveshell.InteractiveShell.init_traceback_handlers",
        "init_user_ns": "IPython.core.interactiveshell.InteractiveShell.init_user_ns",
        "init_virtualenv": "IPython.core.interactiveshell.InteractiveShell.init_virtualenv",
        "input_splitter": "<property object at 0x102682c70>",
        "input_transformers_cleanup": "<property object at 0x102682c20>",
        "inputhook": "IPython.terminal.interactiveshell.TerminalInteractiveShell.inputhook",
        "interact": "IPython.terminal.interactiveshell.TerminalInteractiveShell.interact",
        "loop_runner_map": "{'asyncio': (<IPython.core.async_helpers._AsyncIORunner object at 0x1026815b0>, True), 'curio': (<function _curio_runner at 0x102683280>, True), 'trio': (<function _trio_runner at 0x102683550>, True), 'sync': (<function _pseudo_sync_runner at 0x1026835e0>, False)}",
        "magic": "IPython.core.interactiveshell.InteractiveShell.magic",
        "mainloop": "IPython.terminal.interactiveshell.TerminalInteractiveShell.mainloop",
        "mktempfile": "IPython.core.interactiveshell.InteractiveShell.mktempfile",
        "new_main_mod": "IPython.core.interactiveshell.InteractiveShell.new_main_mod",
        "object_inspect": "IPython.core.interactiveshell.InteractiveShell.object_inspect",
        "object_inspect_mime": "IPython.core.interactiveshell.InteractiveShell.object_inspect_mime",
        "object_inspect_text": "IPython.core.interactiveshell.InteractiveShell.object_inspect_text",
        "prepare_user_module": "IPython.core.interactiveshell.InteractiveShell.prepare_user_module",
        "profile": "<property object at 0x102682db0>",
        "prompt_for_code": "IPython.terminal.interactiveshell.TerminalInteractiveShell.prompt_for_code",
        "pt_app": "None",
        "pt_complete_style": "<property object at 0x103239b80>",
        "push": "IPython.core.interactiveshell.InteractiveShell.push",
        "pylab_gui_select": "None",
        "refresh_style": "IPython.terminal.interactiveshell.TerminalInteractiveShell.refresh_style",
        "register_magic_function": "IPython.core.magic.MagicsManager.register_function",
        "register_post_execute": "IPython.core.interactiveshell.InteractiveShell.register_post_execute",
        "reset": "IPython.core.interactiveshell.InteractiveShell.reset",
        "reset_selective": "IPython.core.interactiveshell.InteractiveShell.reset_selective",
        "restore_sys_module_state": "IPython.core.interactiveshell.InteractiveShell.restore_sys_module_state",
        "restore_term_title": "IPython.terminal.interactiveshell.TerminalInteractiveShell.restore_term_title",
        "rl_next_input": "None",
        "run_ast_nodes": "IPython.core.interactiveshell.InteractiveShell.run_ast_nodes",
        "run_cell": "IPython.core.interactiveshell.InteractiveShell.run_cell",
        "run_cell_async": "IPython.core.interactiveshell.InteractiveShell.run_cell_async",
        "run_cell_magic": "IPython.core.interactiveshell.InteractiveShell.run_cell_magic",
        "run_code": "IPython.core.interactiveshell.InteractiveShell.run_code",
        "run_line_magic": "IPython.core.interactiveshell.InteractiveShell.run_line_magic",
        "runcode": "IPython.core.interactiveshell.InteractiveShell.run_code",
        "safe_execfile": "IPython.core.interactiveshell.InteractiveShell.safe_execfile",
        "safe_execfile_ipy": "IPython.core.interactiveshell.InteractiveShell.safe_execfile_ipy",
        "safe_run_module": "IPython.core.interactiveshell.InteractiveShell.safe_run_module",
        "save_sys_module_state": "IPython.core.interactiveshell.InteractiveShell.save_sys_module_state",
        "separate_in": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b580>",
        "separate_out": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b5e0>",
        "separate_out2": "<IPython.core.interactiveshell.SeparateUnicode object at 0x10268b640>",
        "set_autoindent": "IPython.core.interactiveshell.InteractiveShell.set_autoindent",
        "set_completer_frame": "IPython.core.interactiveshell.InteractiveShell.set_completer_frame",
        "set_custom_completer": "IPython.core.interactiveshell.InteractiveShell.set_custom_completer",
        "set_custom_exc": "IPython.core.interactiveshell.InteractiveShell.set_custom_exc",
        "set_hook": "IPython.core.interactiveshell.InteractiveShell.set_hook",
        "set_next_input": "IPython.core.interactiveshell.InteractiveShell.set_next_input",
        "set_trio_runner": "IPython.core.interactiveshell.InteractiveShell.set_trio_runner",
        "should_run_async": "IPython.core.interactiveshell.InteractiveShell.should_run_async",
        "show_banner": "IPython.core.interactiveshell.InteractiveShell.show_banner",
        "show_usage": "IPython.core.interactiveshell.InteractiveShell.show_usage",
        "show_usage_error": "IPython.core.interactiveshell.InteractiveShell.show_usage_error",
        "showindentationerror": "IPython.core.interactiveshell.InteractiveShell.showindentationerror",
        "showsyntaxerror": "IPython.core.interactiveshell.InteractiveShell.showsyntaxerror",
        "showtraceback": "IPython.core.interactiveshell.InteractiveShell.showtraceback",
        "switch_doctest_mode": "IPython.terminal.interactiveshell.TerminalInteractiveShell.switch_doctest_mode",
        "system": "IPython.core.interactiveshell.InteractiveShell.system_raw",
        "system_piped": "IPython.core.interactiveshell.InteractiveShell.system_piped",
        "system_raw": "IPython.core.interactiveshell.InteractiveShell.system_raw",
        "transform_ast": "IPython.core.interactiveshell.InteractiveShell.transform_ast",
        "transform_cell": "IPython.core.interactiveshell.InteractiveShell.transform_cell",
        "user_expressions": "IPython.core.interactiveshell.InteractiveShell.user_expressions",
        "user_global_ns": "<property object at 0x102682f40>",
        "var_expand": "IPython.core.interactiveshell.InteractiveShell.var_expand",
        "write": "IPython.core.interactiveshell.InteractiveShell.write",
        "write_err": "IPython.core.interactiveshell.InteractiveShell.write_err"
      }
    },
    "IPython.terminal.prompts.ClassicPrompts": {
      "items": {
        "continuation_prompt_tokens": "IPython.terminal.prompts.ClassicPrompts.continuation_prompt_tokens",
        "in_prompt_tokens": "IPython.terminal.prompts.ClassicPrompts.in_prompt_tokens",
        "out_prompt_tokens": "IPython.terminal.prompts.ClassicPrompts.out_prompt_tokens",
        "rewrite_prompt_tokens": "IPython.terminal.prompts.ClassicPrompts.rewrite_prompt_tokens",
        "vi_mode": "IPython.terminal.prompts.Prompts.vi_mode"
      }
    },
    "IPython.terminal.ptutils.IPythonPTLexer": {
      "items": {
        "lex_document": "IPython.terminal.ptutils.IPythonPTLexer.lex_document"
      }
    },
    "IPython.terminal.prompts.Prompts": {
      "items": {
        "continuation_prompt_tokens": "IPython.terminal.prompts.Prompts.continuation_prompt_tokens",
        "in_prompt_tokens": "IPython.terminal.prompts.Prompts.in_prompt_tokens",
        "out_prompt_tokens": "IPython.terminal.prompts.Prompts.out_prompt_tokens",
        "rewrite_prompt_tokens": "IPython.terminal.prompts.Prompts.rewrite_prompt_tokens",
        "vi_mode": "IPython.terminal.prompts.Prompts.vi_mode"
      }
    },
    "IPython.terminal.prompts.RichPromptDisplayHook": {
      "items": {
        "check_for_underscore": "IPython.core.displayhook.DisplayHook.check_for_underscore",
        "compute_format_data": "IPython.core.displayhook.DisplayHook.compute_format_data",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "cull_cache": "IPython.core.displayhook.DisplayHook.cull_cache",
        "fill_exec_result": "IPython.core.displayhook.DisplayHook.fill_exec_result",
        "finish_displayhook": "IPython.core.displayhook.DisplayHook.finish_displayhook",
        "flush": "IPython.core.displayhook.DisplayHook.flush",
        "log_output": "IPython.core.displayhook.DisplayHook.log_output",
        "prompt_count": "<property object at 0x1024551d0>",
        "prompt_end_newline": "False",
        "quiet": "IPython.core.displayhook.DisplayHook.quiet",
        "start_displayhook": "IPython.core.displayhook.DisplayHook.start_displayhook",
        "update_user_ns": "IPython.core.displayhook.DisplayHook.update_user_ns",
        "write_format_data": "IPython.terminal.prompts.RichPromptDisplayHook.write_format_data",
        "write_output_prompt": "IPython.terminal.prompts.RichPromptDisplayHook.write_output_prompt"
      }
    },
    "IPython.terminal.magics.TerminalMagics": {
      "items": {
        "arg_err": "IPython.core.magic.Magics.arg_err",
        "autoindent": "IPython.terminal.magics.TerminalMagics.autoindent",
        "cpaste": "IPython.terminal.magics.TerminalMagics.cpaste",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "default_option": "IPython.core.magic.Magics.default_option",
        "format_latex": "IPython.core.magic.Magics.format_latex",
        "magics": "{'line': {'autoindent': 'autoindent', 'cpaste': 'cpaste', 'paste': 'paste'}, 'cell': {}}",
        "options_table": "None",
        "parse_options": "IPython.core.magic.Magics.parse_options",
        "paste": "IPython.terminal.magics.TerminalMagics.paste",
        "preclean_input": "IPython.terminal.magics.TerminalMagics.preclean_input",
        "registered": "True",
        "rerun_pasted": "IPython.terminal.magics.TerminalMagics.rerun_pasted",
        "shell": "None",
        "store_or_execute": "IPython.terminal.magics.TerminalMagics.store_or_execute"
      }
    },
    "IPython.terminal.ipapp.IPAppCrashHandler": {
      "items": {
        "make_report": "IPython.terminal.ipapp.IPAppCrashHandler.make_report",
        "message_template": "Oops, {app_name} crashed. We do our best to make it stable, but...\n\nA crash report was automatically generated with the following information:\n  - A verbatim copy of the crash traceback.\n  - A copy of your input history during this session.\n  - Data on your current {app_name} configuration.\n\nIt was left in the file named:\n\t'{crash_report_fname}'\nIf you can email this file to the developers, the information in it will help\nthem in understanding and correcting the problem.\n\nYou can mail it to: {contact_name} at {contact_email}\nwith the subject '{app_name} Crash Report'.\n\nIf you want to do it now, the following command will work (under Unix):\nmail -s '{app_name} Crash Report' {contact_email} < {crash_report_fname}\n\nIn your email, please also include information about:\n- The operating system under which the crash happened: Linux, macOS, Windows,\n  other, and which exact version (for example: Ubuntu 16.04.3, macOS 10.13.2,\n  Windows 10 Pro), and whether it is 32-bit or 64-bit;\n- How {app_name} was installed: using pip or conda, from GitHub, as part of\n  a Docker container, or other, providing more detail if possible;\n- How to reproduce the crash: what exact sequence of instructions can one\n  input to get the same crash? Ideally, find a minimal yet complete sequence\n  of instructions that yields the crash.\n\nTo ensure accurate tracking of this issue, please file a report about it at:\n{bug_tracker}\n",
        "section_sep": "\n\n***************************************************************************\n\n"
      }
    },
    "IPython.terminal.ipapp.LocateIPythonApp": {
      "items": {
        "aliases": "{'profile-dir': 'ProfileDir.location', 'profile': 'BaseIPythonApplication.profile', 'ipython-dir': 'BaseIPythonApplication.ipython_dir', 'log-level': 'Application.log_level', 'config': 'BaseIPythonApplication.extra_config_file'}",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "deprecated_subcommands": "{}",
        "description": "print the path to the IPython dir",
        "excepthook": "IPython.core.application.BaseIPythonApplication.excepthook",
        "flags": "{'debug': ({'Application': {'log_level': 10}}, 'set log level to logging.DEBUG (maximize logging output)'), 'quiet': ({'Application': {'log_level': 50}}, 'set log level to logging.CRITICAL (minimize logging output)'), 'init': ({'BaseIPythonApplication': {'copy_config_files': True, 'auto_create': True}}, 'Initialize profile with default config files.  This is equivalent\\n            to running `ipython profile create <profile>` prior to startup.\\n            ')}",
        "init_config_files": "IPython.core.application.BaseIPythonApplication.init_config_files",
        "init_crash_handler": "IPython.core.application.BaseIPythonApplication.init_crash_handler",
        "init_profile_dir": "IPython.core.application.BaseIPythonApplication.init_profile_dir",
        "initialize": "IPython.core.application.BaseIPythonApplication.initialize",
        "initialize_subcommand": "IPython.core.application.BaseIPythonApplication.initialize_subcommand",
        "load_config_file": "IPython.core.application.BaseIPythonApplication.load_config_file",
        "loaded_config_files": "<property object at 0x101cd1d60>",
        "name": "ipython",
        "python_config_loader_class": "IPython.core.application.ProfileAwareConfigLoader",
        "stage_default_config_file": "IPython.core.application.BaseIPythonApplication.stage_default_config_file",
        "start": "IPython.terminal.ipapp.LocateIPythonApp.start",
        "subcommands": "{'profile': ('IPython.core.profileapp.ProfileLocate', 'print the path to an IPython profile directory')}"
      }
    },
    "IPython.terminal.ipapp.TerminalIPythonApp": {
      "items": {
        "aliases": "{'profile-dir': 'ProfileDir.location', 'profile': 'BaseIPythonApplication.profile', 'ipython-dir': 'BaseIPythonApplication.ipython_dir', 'log-level': 'Application.log_level', 'config': 'BaseIPythonApplication.extra_config_file', 'autocall': 'InteractiveShell.autocall', 'colors': 'InteractiveShell.colors', 'logfile': 'InteractiveShell.logfile', 'logappend': 'InteractiveShell.logappend', 'c': 'InteractiveShellApp.code_to_run', 'm': 'InteractiveShellApp.module_to_run', 'ext': 'InteractiveShellApp.extra_extension', 'gui': 'InteractiveShellApp.gui', 'pylab': 'InteractiveShellApp.pylab', 'matplotlib': 'InteractiveShellApp.matplotlib', 'cache-size': 'InteractiveShell.cache_size'}",
        "crash_handler_class": "IPython.terminal.ipapp.IPAppCrashHandler",
        "cross_validation_lock": "<property object at 0x101c57180>",
        "deprecated_subcommands": "{'qtconsole': ('qtconsole.qtconsoleapp.JupyterQtConsoleApp', 'DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter Qt Console.'), 'notebook': ('notebook.notebookapp.NotebookApp', 'DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter HTML Notebook Server.'), 'console': ('jupyter_console.app.ZMQTerminalIPythonApp', 'DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter terminal-based Console.'), 'nbconvert': ('nbconvert.nbconvertapp.NbConvertApp', 'DEPRECATED, Will be removed in IPython 6.0 : Convert notebooks to/from other formats.'), 'trust': ('nbformat.sign.TrustNotebookApp', 'DEPRECATED, Will be removed in IPython 6.0 : Sign notebooks to trust their potentially unsafe contents at load.'), 'kernelspec': ('jupyter_client.kernelspecapp.KernelSpecApp', 'DEPRECATED, Will be removed in IPython 6.0 : Manage Jupyter kernel specifications.'), 'install-nbextension': ('notebook.nbextensions.InstallNBExtensionApp', 'DEPRECATED, Will be removed in IPython 6.0 : Install Jupyter notebook extension files')}",
        "description": "=========\n IPython\n=========\n\nTools for Interactive Computing in Python\n=========================================\n\n    A Python shell with automatic history (input and output), dynamic object\n    introspection, easier configuration, command completion, access to the\n    system shell and more.  IPython can also be embedded in running programs.\n\n\nUsage\n\n    ipython [subcommand] [options] [-c cmd | -m mod | file] [--] [arg] ...\n\n    If invoked with no options, it executes the file and exits, passing the\n    remaining arguments to the script, just as if you had specified the same\n    command with python. You may need to specify `--` before args to be passed\n    to the script, to prevent IPython from attempting to parse them. If you\n    specify the option `-i` before the filename, it will enter an interactive\n    IPython session after running the script, rather than exiting. Files ending\n    in .py will be treated as normal Python, but files ending in .ipy can\n    contain special IPython syntax (magic commands, shell expansions, etc.).\n\n    Almost all configuration in IPython is available via the command-line. Do\n    `ipython --help-all` to see all available options.  For persistent\n    configuration, look into your `ipython_config.py` configuration file for\n    details.\n\n    This file is typically installed in the `IPYTHONDIR` directory, and there\n    is a separate configuration directory for each profile. The default profile\n    directory will be located in $IPYTHONDIR/profile_default. IPYTHONDIR\n    defaults to to `$HOME/.ipython`.  For Windows users, $HOME resolves to\n    C:\\Users\\YourUserName in most instances.\n\n    To initialize a profile with the default configuration file, do::\n\n      $> ipython profile create\n\n    and start editing `IPYTHONDIR/profile_default/ipython_config.py`\n\n    In IPython's documentation, we will refer to this directory as\n    `IPYTHONDIR`, you can change its default location by creating an\n    environment variable with this name and setting it to the desired path.\n\n    For more information, see the manual available in HTML and PDF in your\n    installation, or online at https://ipython.org/documentation.html.\n",
        "examples": "\nipython --matplotlib       # enable matplotlib integration\nipython --matplotlib=qt    # enable matplotlib integration with qt4 backend\n\nipython --log-level=DEBUG  # set logging to DEBUG\nipython --profile=foo      # start with profile foo\n\nipython profile create foo # create profile foo w/ default config files\nipython help profile       # show the help for the profile subcmd\n\nipython locate             # print the path to the IPython directory\nipython locate profile foo # print the path to the directory for profile `foo`\n",
        "excepthook": "IPython.core.application.BaseIPythonApplication.excepthook",
        "flags": "{'debug': ({'Application': {'log_level': 10}}, 'set log level to logging.DEBUG (maximize logging output)'), 'quiet': ({'Application': {'log_level': 50}}, 'set log level to logging.CRITICAL (minimize logging output)'), 'init': ({'BaseIPythonApplication': {'copy_config_files': True, 'auto_create': True}}, 'Initialize profile with default config files.  This is equivalent\\n            to running `ipython profile create <profile>` prior to startup.\\n            '), 'autoindent': ({'InteractiveShell': {'autoindent': True}}, 'Turn on autoindenting.'), 'no-autoindent': ({'InteractiveShell': {'autoindent': False}}, 'Turn off autoindenting.'), 'automagic': ({'InteractiveShell': {'automagic': True}}, 'Turn on the auto calling of magic commands. Type %%magic at the\\n        IPython  prompt  for  more information.'), 'no-automagic': ({'InteractiveShell': {'automagic': False}}, 'Turn off the auto calling of magic commands.'), 'pdb': ({'InteractiveShell': {'pdb': True}}, 'Enable auto calling the pdb debugger after every exception.'), 'no-pdb': ({'InteractiveShell': {'pdb': False}}, 'Disable auto calling the pdb debugger after every exception.'), 'pprint': ({'PlainTextFormatter': {'pprint': True}}, 'Enable auto pretty printing of results.'), 'no-pprint': ({'PlainTextFormatter': {'pprint': False}}, 'Disable auto pretty printing of results.'), 'color-info': ({'InteractiveShell': {'color_info': True}}, 'IPython can display information about objects via a set of functions,\\n    and optionally can use colors for this, syntax highlighting\\n    source code and various other elements. This is on by default, but can cause\\n    problems with some pagers. If you see such problems, you can disable the\\n    colours.'), 'no-color-info': ({'InteractiveShell': {'color_info': False}}, 'Disable using colors for info related things.'), 'ignore-cwd': ({'InteractiveShellApp': {'ignore_cwd': True}}, 'Exclude the current working directory from sys.path'), 'no-ignore-cwd': ({'InteractiveShellApp': {'ignore_cwd': False}}, 'Include the current working directory in sys.path'), 'nosep': ({'InteractiveShell': {'separate_in': '', 'separate_out': '', 'separate_out2': ''}}, 'Eliminate all spacing between prompts.'), 'pylab': ({'InteractiveShellApp': {'pylab': 'auto'}}, 'Pre-load matplotlib and numpy for interactive use with\\n    the default matplotlib backend.'), 'matplotlib': ({'InteractiveShellApp': {'matplotlib': 'auto'}}, 'Configure matplotlib for interactive use with\\n    the default matplotlib backend.'), 'autoedit-syntax': ({'TerminalInteractiveShell': {'autoedit_syntax': True}}, 'Turn on auto editing of files with syntax errors.'), 'no-autoedit-syntax': ({'TerminalInteractiveShell': {'autoedit_syntax': False}}, 'Turn off auto editing of files with syntax errors.'), 'simple-prompt': ({'TerminalInteractiveShell': {'simple_prompt': True}}, 'Force simple minimal prompt using `raw_input`'), 'no-simple-prompt': ({'TerminalInteractiveShell': {'simple_prompt': False}}, 'Use a rich interactive prompt with prompt_toolkit'), 'banner': ({'TerminalIPythonApp': {'display_banner': True}}, 'Display a banner upon starting IPython.'), 'no-banner': ({'TerminalIPythonApp': {'display_banner': False}}, \"Don't display a banner upon starting IPython.\"), 'confirm-exit': ({'TerminalInteractiveShell': {'confirm_exit': True}}, \"Set to confirm when you try to exit IPython with an EOF (Control-D\\n    in Unix, Control-Z/Enter in Windows). By typing 'exit' or 'quit',\\n    you can force a direct exit without any confirmation.\"), 'no-confirm-exit': ({'TerminalInteractiveShell': {'confirm_exit': False}}, \"Don't prompt the user when exiting.\"), 'term-title': ({'TerminalInteractiveShell': {'term_title': True}}, 'Enable auto setting the terminal title.'), 'no-term-title': ({'TerminalInteractiveShell': {'term_title': False}}, 'Disable auto setting the terminal title.'), 'classic': ({'InteractiveShell': {'cache_size': 0, 'separate_in': '', 'separate_out': '', 'separate_out2': '', 'colors': 'NoColor', 'xmode': 'Plain'}, 'PlainTextFormatter': {'pprint': False}, 'TerminalInteractiveShell': {'prompts_class': 'IPython.terminal.prompts.ClassicPrompts'}}, 'Gives IPython a similar feel to the classic Python prompt.'), 'quick': ({'TerminalIPythonApp': {'quick': True}}, 'Enable quick startup with no config files.'), 'i': ({'TerminalIPythonApp': {'force_interact': True}}, 'If running code from the command line, become interactive afterwards.\\n    It is often useful to follow this with `--` to treat remaining flags as\\n    script arguments.\\n    ')}",
        "init_banner": "IPython.terminal.ipapp.TerminalIPythonApp.init_banner",
        "init_code": "IPython.core.shellapp.InteractiveShellApp.init_code",
        "init_config_files": "IPython.core.application.BaseIPythonApplication.init_config_files",
        "init_crash_handler": "IPython.core.application.BaseIPythonApplication.init_crash_handler",
        "init_extensions": "IPython.core.shellapp.InteractiveShellApp.init_extensions",
        "init_gui_pylab": "IPython.core.shellapp.InteractiveShellApp.init_gui_pylab",
        "init_path": "IPython.core.shellapp.InteractiveShellApp.init_path",
        "init_profile_dir": "IPython.core.application.BaseIPythonApplication.init_profile_dir",
        "init_shell": "IPython.terminal.ipapp.TerminalIPythonApp.init_shell",
        "initialize": "IPython.terminal.ipapp.TerminalIPythonApp.initialize",
        "initialize_subcommand": "IPython.core.application.BaseIPythonApplication.initialize_subcommand",
        "load_config_file": "IPython.core.application.BaseIPythonApplication.load_config_file",
        "loaded_config_files": "<property object at 0x101cd1d60>",
        "name": "ipython",
        "parse_command_line": "IPython.terminal.ipapp.TerminalIPythonApp.parse_command_line",
        "python_config_loader_class": "IPython.core.application.ProfileAwareConfigLoader",
        "stage_default_config_file": "IPython.core.application.BaseIPythonApplication.stage_default_config_file",
        "start": "IPython.terminal.ipapp.TerminalIPythonApp.start",
        "subcommands": "{'profile': ('IPython.core.profileapp.ProfileApp', 'Create and manage IPython profiles.'), 'kernel': ('ipykernel.kernelapp.IPKernelApp', 'Start a kernel without an attached frontend.'), 'locate': ('IPython.terminal.ipapp.LocateIPythonApp', 'print the path to the IPython dir'), 'history': ('IPython.core.historyapp.HistoryApp', 'Manage the IPython history database.'), 'qtconsole': ('qtconsole.qtconsoleapp.JupyterQtConsoleApp', 'DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter Qt Console.'), 'notebook': ('notebook.notebookapp.NotebookApp', 'DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter HTML Notebook Server.'), 'console': ('jupyter_console.app.ZMQTerminalIPythonApp', 'DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter terminal-based Console.'), 'nbconvert': ('nbconvert.nbconvertapp.NbConvertApp', 'DEPRECATED, Will be removed in IPython 6.0 : Convert notebooks to/from other formats.'), 'trust': ('nbformat.sign.TrustNotebookApp', 'DEPRECATED, Will be removed in IPython 6.0 : Sign notebooks to trust their potentially unsafe contents at load.'), 'kernelspec': ('jupyter_client.kernelspecapp.KernelSpecApp', 'DEPRECATED, Will be removed in IPython 6.0 : Manage Jupyter kernel specifications.'), 'install-nbextension': ('notebook.nbextensions.InstallNBExtensionApp', 'DEPRECATED, Will be removed in IPython 6.0 : Install Jupyter notebook extension files')}"
      }
    },
    "IPython.utils.capture.RichOutput": {
      "items": {
        "display": "IPython.utils.capture.RichOutput.display"
      }
    },
    "IPython.utils.process.FindCmdError": {
      "items": {
        "args": "<attribute 'args' of 'BaseException' objects>"
      }
    },
    "IPython.utils.syspathcontext.appended_to_syspath": {
      "items": {}
    },
    "IPython.utils.tempdir.NamedFileInTemporaryDirectory": {
      "items": {
        "cleanup": "IPython.utils.tempdir.NamedFileInTemporaryDirectory.cleanup"
      }
    },
    "IPython.utils.tempdir.TemporaryWorkingDirectory": {
      "items": {}
    },
    "IPython.utils.text.EvalFormatter": {
      "items": {
        "get_field": "IPython.utils.text.EvalFormatter.get_field"
      }
    },
    "IPython.utils.text.FullEvalFormatter": {
      "items": {
        "vformat": "IPython.utils.text.FullEvalFormatter.vformat"
      }
    }
  }
}